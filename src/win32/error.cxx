/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <sk/async/win32/error.hxx>

namespace sk::async::win32 {

    namespace detail {

        auto win32_errc_category::name() const noexcept -> char const * {
            return "win32";
        }

        auto win32_errc_category::message(int c) const -> std::string {
            LPSTR msgbuf;

            auto len = FormatMessageA(
                FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM |
                    FORMAT_MESSAGE_IGNORE_INSERTS,
                nullptr, c, 0, reinterpret_cast<LPSTR>(&msgbuf), 0, nullptr);

            if (len == 0)
                return "[FormatMessageA() failed]";

            std::string ret(msgbuf, len);
            LocalFree(msgbuf);

            return ret;
        }

    } // namespace detail

    auto win32_errc_category() -> detail::win32_errc_category const & {
        static detail::win32_errc_category c;
        return c;
    }

    auto make_error_code(error e) -> std::error_code {
        switch (static_cast<DWORD>(e)) {
        case ERROR_HANDLE_EOF:
            return async::error::end_of_file;
        default:
            return {static_cast<int>(e), win32_errc_category()};
        }
    }

    auto make_win32_error(DWORD e) -> std::error_code {
        return make_error_code(static_cast<error>(e));
    }

    auto make_win32_error(LSTATUS e) -> std::error_code {
        return make_error_code(static_cast<error>(e));
    }

    auto get_last_error() -> std::error_code {
        return make_win32_error(GetLastError());
    }

} // namespace sk::async::win32
