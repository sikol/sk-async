/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

#include <fcntl.h>
#include <netdb.h>

#include <cstring>
#include <system_error>

#include <sk/cio/async_invoke.hxx>
#include <sk/cio/expected.hxx>
#include <sk/cio/posix/async_api.hxx>
#include <sk/cio/posix/error.hxx>
#include <sk/cio/reactor.hxx>
#include <sk/cio/task.hxx>

namespace sk::cio::posix {

    /*************************************************************************
     *
     * POSIX async API.
     *
     */

    struct co_fd_is_readable {
        int fd;
        epoll_coro_state cstate;

        co_fd_is_readable(int fd_) : fd(fd_) {}

        bool await_ready()
        {
            return false;
        }

        bool await_suspend(std::coroutine_handle<> coro_handle_)
        {
            std::lock_guard lock(cstate.mutex);
            cstate.coro_handle = coro_handle_;
            reactor_handle::get_global_reactor().register_read_interest(
                fd, &cstate);
            return true;
        }

        void await_resume() {}
    };

    struct co_fd_is_writable {
        int fd;
        epoll_coro_state cstate;

        co_fd_is_writable(int fd_) : fd(fd_) {}

        bool await_ready()
        {
            return false;
        }

        bool await_suspend(std::coroutine_handle<> coro_handle_)
        {
            std::lock_guard lock(cstate.mutex);
            cstate.coro_handle = coro_handle_;
            reactor_handle::get_global_reactor().register_write_interest(
                fd, &cstate);
            return true;
        }

        void await_resume() {}
    };

    auto async_fd_open(char const *path, int flags, int mode)
        -> task<expected<int, std::error_code>>
    {

        int fd =
            co_await async_invoke([&] { return ::open(path, flags, mode); });

        if (fd == -1)
            co_return make_unexpected(get_errno());
        else
            co_return fd;
    }

    auto async_fd_recv(int fd, void *buf, std::size_t n, int flags)
        -> task<expected<ssize_t, std::error_code>>
    {
        do {
            auto ret = ::recv(fd, buf, n, flags);
            if (ret != -1)
                co_return ret;

            if (errno != EWOULDBLOCK)
                co_return make_unexpected(get_errno());

            co_await co_fd_is_readable(fd);
        } while (true);
    }

    auto async_fd_send(int fd, void const *buf, std::size_t n, int flags)
        -> task<expected<ssize_t, std::error_code>>
    {
        do {
            auto ret = ::send(fd, buf, n, flags);
            if (ret != -1)
                co_return ret;

            if (errno != EWOULDBLOCK)
                co_return make_unexpected(get_errno());

            co_await co_fd_is_writable(fd);
        } while (true);
    }

    auto async_fd_connect(int fd, sockaddr const *addr, socklen_t addrlen)
        -> task<expected<void, std::error_code>>
    {
        auto ret = ::connect(fd, addr, addrlen);

        if (ret == 0)
            co_return {};

        if (errno != EWOULDBLOCK)
            co_return make_unexpected(get_errno());

        co_await co_fd_is_writable(fd);
        co_return {};
    }

    auto async_fd_accept(int fd, sockaddr *addr, socklen_t *addrlen)
        -> task<expected<int, std::error_code>>
    {
        do {
            std::cerr << "async_fd_accept " << fd << '\n';
            auto ret = ::accept(fd, addr, addrlen);
            std::cerr << "async_fd_accept ret=" << ret
                      << " errno=" << std::strerror(errno) << '\n';
            if (ret != -1)
                co_return ret;

            if (errno != EWOULDBLOCK)
                co_return make_unexpected(get_errno());

            std::cerr << "async_fd_accept wait for readable\n";
            co_await co_fd_is_readable(fd);
            std::cerr << "async_fd_accept is readable\n";
        } while (true);
    }

} // namespace sk::cio::posix
