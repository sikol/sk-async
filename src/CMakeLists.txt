# Copyright (c) 2019, 2020, 2021 SiKol Ltd.
# 
# Boost Software License - Version 1.0 - August 17th, 2003
# 
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
# 
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

cmake_minimum_required(VERSION 3.12)

enable_testing()

add_library(sk-cio)

target_sources(sk-cio PRIVATE 
    error.cxx
    reactor.cxx
    net/resolve.cxx
    
    include/sk/cio/channel/concepts.hxx
    include/sk/cio/channel/write.hxx
    include/sk/cio/channel/read.hxx
    include/sk/cio/channel/charchannel.hxx
    include/sk/cio/channel/pmr_channel.hxx

    include/sk/cio/filechannel.hxx
    include/sk/cio/filechannel/filechannel.hxx
    include/sk/cio/filechannel/dafilechannel.hxx
    include/sk/cio/filechannel/seqfilechannel.hxx

    include/sk/cio/net/address.hxx
    include/sk/cio/net/tcpchannel.hxx
    include/sk/cio/net/tcpserverchannel.hxx

    include/sk/cio/detail/config.hxx
    include/sk/cio/detail/safeint.hxx

    include/sk/cio/concepts.hxx
    include/sk/cio/error.hxx
    include/sk/cio/task.hxx
    include/sk/cio/types.hxx
    include/sk/cio/reactor.hxx
    include/sk/cio/async_invoke.hxx
    include/sk/cio/expected.hxx
    include/sk/cio/detach_task.hxx
    include/sk/cio/workq.hxx
    include/sk/cio/dtask.hxx

    include/sk/cio.hxx
)

if(WIN32)
    target_sources(sk-cio PRIVATE
        win32/error.cxx
        win32/iocp_reactor.cxx
        win32/async_api.cxx

        include/sk/cio/win32/filechannel/detail/filechannel_base.hxx
        include/sk/cio/win32/filechannel/detail/idafilechannel_base.hxx
        include/sk/cio/win32/filechannel/detail/iseqfilechannel_base.hxx
        include/sk/cio/win32/filechannel/detail/oseqfilechannel_base.hxx
        include/sk/cio/win32/filechannel/detail/odafilechannel_base.hxx
        include/sk/cio/win32/filechannel/idafilechannel.hxx
        include/sk/cio/win32/filechannel/odafilechannel.hxx
        include/sk/cio/win32/filechannel/iseqfilechannel.hxx
        include/sk/cio/win32/filechannel/oseqfilechannel.hxx

        include/sk/cio/win32/net/tcpchannel.hxx
        include/sk/cio/win32/net/tcpserverchannel.hxx

        include/sk/cio/win32/error.hxx
        include/sk/cio/win32/handle.hxx
        include/sk/cio/win32/iocp_reactor.hxx
        include/sk/cio/win32/windows.hxx
        include/sk/cio/win32/async_invoke.hxx
        include/sk/cio/win32/async_api.hxx
    )
endif()

target_include_directories(sk-cio PUBLIC include)
target_link_libraries(sk-cio PUBLIC tl::expected)

if (WIN32)
    target_link_libraries(sk-cio PUBLIC wsock32 ws2_32)
endif()

target_compile_features(sk-cio PUBLIC cxx_std_20)

install(DIRECTORY "include/sk" TYPE INCLUDE)
