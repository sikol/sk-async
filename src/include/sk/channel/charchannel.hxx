/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CIO_CHARCHANNEL_HXX_INCLUDED
#define SK_CIO_CHARCHANNEL_HXX_INCLUDED

#include <cstddef>

#include <sk/channel/concepts.hxx>
#include <sk/channel/types.hxx>
#include <sk/expected.hxx>
#include <sk/task.hxx>

namespace sk {

    // clang-format off

    namespace detail {

        template <typename T>
        concept charchannel_layer = requires
        {
            channel_base<T>;
        } && std::same_as<std::byte, channel_value_t<T>>;

        // clang-format on

        /*************************************************************************
         *
         * charchannel: convert a byte channel into a char type.
         *
         */
        template <detail::bytesized_char Char,
                  detail::charchannel_layer Channel>
        struct charchannel_base {
            using value_type = Char;

            [[nodiscard]] auto is_open() const -> bool
            {
                return _base->is_open();
            }

            [[nodiscard]] auto async_close()
                -> task<expected<void, std::error_code>>
            {
                return _base->async_close();
            }

            [[nodiscard]] auto close() -> expected<void, std::error_code>
            {
                return _base->close();
            }

            charchannel_base(charchannel_base const &) noexcept = delete;
            charchannel_base &
            operator=(charchannel_base const &) noexcept = delete;

        protected:
            explicit charchannel_base(Channel *base) : _base(base) {}
            charchannel_base(charchannel_base &&) noexcept = default;
            charchannel_base &operator=(charchannel_base &&) noexcept = default;

            Channel *_base;
        };

    } // namespace detail

    template <detail::bytesized_char Char, detail::charchannel_layer Channel>
    struct iseqcharchannel final : detail::charchannel_base<Char, Channel> {
        explicit iseqcharchannel(Channel &base)
            : detail::charchannel_base<Char, Channel>(&base)
        {
        }

        [[nodiscard]] auto async_read_some(Char *buffer, io_size_t nobjs)
            -> task<expected<io_size_t, std::error_code>>
        {
            return this->_base->async_read_some(
                reinterpret_cast<std::byte *>(buffer), nobjs);
        }

        [[nodiscard]] auto read_some(Char *buffer, io_size_t nobjs)
            -> expected<io_size_t, std::error_code>
        {
            return this->_base->read_some(reinterpret_cast<std::byte *>(buffer),
                                          nobjs);
        }
    };

    template <typename Char, iseqchannel Channel>
    auto make_iseqcharchannel(Channel &c)
    {
        return iseqcharchannel<Char, Channel>(c);
    }

    template <detail::bytesized_char Char, detail::charchannel_layer Channel>
    struct oseqcharchannel final : detail::charchannel_base<Char, Channel> {
        explicit oseqcharchannel(Channel &base)
            : detail::charchannel_base<Char, Channel>(&base)
        {
        }

        [[nodiscard]] auto write_some(Char const *buffer, io_size_t n)
            -> expected<io_size_t, std::error_code>
        {
            return this->_base->write_some(
                reinterpret_cast<std::byte const *>(buffer), n);
        }

        [[nodiscard]] auto async_write_some(Char const *buffer, io_size_t n)
            -> task<expected<io_size_t, std::error_code>>
        {
            return this->_base->async_write_some(
                reinterpret_cast<std::byte const *>(buffer), n);
        }
    };

    template <typename Char, oseqchannel Channel>
    auto make_oseqcharchannel(Channel &c)
    {
        return oseqcharchannel<Char, Channel>(c);
    }

    template <detail::bytesized_char Char, detail::charchannel_layer Channel>
    struct seqcharchannel final : detail::charchannel_base<Char, Channel> {
        explicit seqcharchannel(Channel &base)
            : detail::charchannel_base<Char, Channel>(&base)
        {
        }

        [[nodiscard]] auto async_read_some(Char *buffer, io_size_t nobjs)
            -> task<expected<io_size_t, std::error_code>>
        {
            return this->_base->async_read_some(
                reinterpret_cast<std::byte *>(buffer), nobjs);
        }

        [[nodiscard]] auto read_some(Char *buffer, io_size_t nobjs)
            -> expected<io_size_t, std::error_code>
        {
            return this->_base->read_some(reinterpret_cast<std::byte *>(buffer),
                                          nobjs);
        }

        [[nodiscard]] auto write_some(Char const *buffer, io_size_t n)
            -> expected<io_size_t, std::error_code>
        {
            return this->_base->write_some(
                reinterpret_cast<std::byte const *>(buffer), n);
        }

        [[nodiscard]] auto async_write_some(Char const *buffer, io_size_t n)
            -> task<expected<io_size_t, std::error_code>>
        {
            return this->_base->async_write_some(
                reinterpret_cast<std::byte const *>(buffer), n);
        }
    };

    template <typename Char, seqchannel Channel>
    auto make_seqcharchannel(Channel &c)
    {
        return seqcharchannel<Char, Channel>(c);
    }

} // namespace sk

#endif // SK_CIO_CHARCHANNEL_HXX_INCLUDED
