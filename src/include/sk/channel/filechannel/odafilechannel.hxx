/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CIO_FILECHANNEL_ODAFILECHANNEL_HXX_INCLUDED
#define SK_CIO_FILECHANNEL_ODAFILECHANNEL_HXX_INCLUDED

#include <cstddef>
#include <filesystem>
#include <system_error>

#include <sk/channel/concepts.hxx>
#include <sk/channel/error.hxx>
#include <sk/channel/filechannel/detail/filechannel_base.hxx>
#include <sk/channel/filechannel/filechannel.hxx>
#include <sk/channel/types.hxx>
#include <sk/task.hxx>

namespace sk {

    /*************************************************************************
     *
     * odafilechannel: a direct access channel that writes to a file.
     */

    // clang-format off
    struct odafilechannel final : detail::dafilechannel_base {

        /*
         * Create an odafilechannel which is closed.
         */
        odafilechannel() = default;

        /*
         * Open a file.
         */
        [[nodiscard]]
        auto async_open(std::filesystem::path const &,
                        fileflags_t = fileflags::none)
        -> task<expected<void, std::error_code>>;

        [[nodiscard]]
        auto open(std::filesystem::path const &,
                  fileflags_t = fileflags::none)
        -> expected<void, std::error_code>;

        odafilechannel(odafilechannel const &) = delete;
        odafilechannel(odafilechannel &&) noexcept = default;
        auto operator=(odafilechannel const &) -> odafilechannel & = delete;
        auto operator=(odafilechannel &&) noexcept -> odafilechannel & = default;
        ~odafilechannel() = default;

        /*
         * Write data.
         */
        [[nodiscard]]
        auto async_write_some_at(io_offset_t loc,
                                 std::byte const *buffer,
                                 io_size_t n)
        -> task<expected<io_size_t, std::error_code>> {
            return _async_write_some_at(loc, buffer, n);
        }

        [[nodiscard]]
        auto write_some_at(io_offset_t loc,
                           std::byte const *buffer,
                           io_size_t n)
        -> expected<io_size_t, std::error_code> {
            return _write_some_at(loc, buffer, n);
        }
    };
    // clang-format on

    static_assert(odachannel<odafilechannel>);

    /*************************************************************************
     * odafilechannel::async_open()
     */
    inline auto odafilechannel::async_open(std::filesystem::path const &path,
                                           fileflags_t flags)
        -> task<expected<void, std::error_code>>
    {

        if (flags & fileflags::read)
            co_return make_unexpected(sk::error::filechannel_invalid_flags);

        flags |= fileflags::write;
        co_return co_await this->_async_open(path, flags);
    }

    /*************************************************************************
     * odafilechannel::open()
     */
    inline auto odafilechannel::open(std::filesystem::path const &path,
                                     fileflags_t flags)
        -> expected<void, std::error_code>
    {

        if (flags & fileflags::read)
            return make_unexpected(sk::error::filechannel_invalid_flags);

        flags |= fileflags::write;
        return this->_open(path, flags);
    }

} // namespace sk

#endif // SK_CIO_FILECHANNEL_ODAFILECHANNEL_HXX_INCLUDED
