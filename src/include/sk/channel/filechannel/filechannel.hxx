/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CIO_FILECHANNEL_FILECHANNEL_HXX_INCLUDED
#define SK_CIO_FILECHANNEL_FILECHANNEL_HXX_INCLUDED

#include <cstdint>

namespace sk {

    using fileflags_t = std::uint32_t;

    namespace fileflags {
        // No flags
        inline constexpr fileflags_t none = 0x0;

        // Open the file for writing.
        inline constexpr fileflags_t write = 0x1;

        // Open the file for reading.
        inline constexpr fileflags_t read = 0x2;

        // When opening a file for writing, truncate it.
        inline constexpr fileflags_t trunc = 0x4;

        // When opening a file for writing, seek to the end.
        inline constexpr fileflags_t append = 0x8;

        // When opening a file for writing, allowing creating a new file.
        inline constexpr fileflags_t create_new = 0x10;

        // When opening a file, allowing opening an existing file.
        // This can be specified for input files, but it's implied anyway.
        inline constexpr fileflags_t open_existing = 0x20;
    } // namespace fileflags

} // namespace sk

#endif // SK_CIO_FILECHANNEL_FILECHANNEL_HXX_INCLUDED
