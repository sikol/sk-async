/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CIO_TYPES_HXX_INCLUDED
#define SK_CIO_TYPES_HXX_INCLUDED

#include <cstddef>
#include <cstdint>
#include <limits>

namespace sk {

    // Type representing an I/O offset inside a direct access channel.
    using io_offset_t = std::uint64_t;

    // Offset value indicating data should be written at the end of
    // the file.
    constexpr io_offset_t at_end = std::numeric_limits<io_offset_t>::max();

    // Type representing the size of an I/O operation.
    using io_size_t = std::uint64_t;

    // Value indicating an I/O operation should read or write as much
    // as possible.
    constexpr io_size_t unlimited = std::numeric_limits<io_size_t>::max();

} // namespace sk

#endif // SK_CIO_TYPES_HXX_INCLUDED
