/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CIO_MEMCHANNEL_DETAIL_MEMCHANNEL_BASE_HXX_INCLUDED
#define SK_CIO_MEMCHANNEL_DETAIL_MEMCHANNEL_BASE_HXX_INCLUDED

#include <cstddef>
#include <cstring>
#include <system_error>

#include <sk/channel/error.hxx>
#include <sk/channel/types.hxx>
#include <sk/expected.hxx>
#include <sk/task.hxx>

namespace sk::detail {

    struct memchannel_base {
        using value_type = std::byte;

        memchannel_base(memchannel_base &&) = default;
        auto operator=(memchannel_base &&) -> memchannel_base & = default;
        memchannel_base(memchannel_base const &) = delete;
        auto operator=(memchannel_base const &) -> memchannel_base & = delete;

        [[nodiscard]] auto is_open() const -> bool
        {
            return _begin != nullptr;
        }

        [[nodiscard]] auto async_close()
            -> task<expected<void, std::error_code>>
        {
            _begin = nullptr;
            co_return {};
        }

        [[nodiscard]] auto close() -> expected<void, std::error_code>
        {
            _begin = nullptr;
            return {};
        }

    protected:
        [[nodiscard]] auto
        _read_some_at(io_offset_t loc, std::byte *buf, io_size_t n)
            -> expected<io_size_t, std::error_code>
        {
            if (loc > static_cast<std::uintptr_t>(_end - _begin))
                return make_unexpected(sk::error::end_of_file);

            auto *begin = _begin + loc;

            if (n > static_cast<std::uintptr_t>(_end - begin))
                n = _end - begin;

            if (n == 0)
                return make_unexpected(sk::error::end_of_file);

            std::memcpy(buf, begin, n);
            return n;
        }

        [[nodiscard]] auto _write_some_at(io_offset_t loc,
                                          std::byte const *buf,
                                          io_size_t n)
            -> expected<io_size_t, std::error_code>
        {
            if (loc > static_cast<std::uintptr_t>(_end - _begin))
                return make_unexpected(sk::error::end_of_file);

            auto *begin = _begin + loc;

            if (begin > (_end - n))
                n = _end - begin;

            if (n == 0)
                return make_unexpected(sk::error::end_of_file);

            std::memcpy(begin, buf, n);
            return n;
        }

        [[nodiscard]] auto _async_read_some_at(io_offset_t loc,
                                               std::byte *buf,
                                               io_size_t n)
            -> task<expected<io_size_t, std::error_code>>
        {
            co_return _read_some_at(loc, buf, n);
        }

        [[nodiscard]] auto _async_write_some_at(io_offset_t loc,
                                                std::byte const *buf,
                                                io_size_t n)
            -> task<expected<io_size_t, std::error_code>>
        {
            co_return _write_some_at(loc, buf, n);
        }

        memchannel_base() = default;
        ~memchannel_base() = default;

        memchannel_base(void *ptr, void *end) noexcept
            : _begin(static_cast<std::byte *>(ptr)),
              _end(static_cast<std::byte *>(end))
        {
            if (_end < _begin)
                _end = _begin;
        }

    private:
        std::byte *_begin;
        std::byte *_end;
    };

} // namespace sk::detail

#endif // SK_CIO_MEMCHANNEL_DETAIL_MEMCHANNEL_BASE_HXX_INCLUDED
