/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CHANNEL_MEMCHANNEL_MEMCHANNEL_HXX
#define SK_CHANNEL_MEMCHANNEL_MEMCHANNEL_HXX

#include <sk/channel/memchannel/detail/memchannel_base.hxx>

namespace sk {

    struct memchannel final : detail::memchannel_base {
        using value_type = std::byte;

        memchannel(void *begin, void *end) : detail::memchannel_base(begin, end)
        {
        }

        memchannel(memchannel &&) = default;
        memchannel &operator=(memchannel &&) = default;
        memchannel(memchannel const &) = delete;
        memchannel &operator=(memchannel const &) = delete;
        ~memchannel() = default;

        [[nodiscard]] auto
        read_some_at(io_offset_t loc, std::byte *buffer, io_size_t n)
            -> expected<io_size_t, std::error_code>
        {
            return _read_some_at(loc, buffer, n);
        }

        [[nodiscard]] auto read_some(std::byte *buffer, io_size_t n)
            -> expected<io_size_t, std::error_code>
        {
            auto ret = read_some_at(_read_position, buffer, n);
            if (ret)
                _read_position += *ret;
            return ret;
        }

        [[nodiscard]] auto
        async_read_some_at(io_offset_t loc, std::byte *buf, io_size_t n)
            -> task<expected<io_size_t, std::error_code>>
        {
            co_return read_some_at(loc, buf, n);
        }

        [[nodiscard]] auto async_read_some(std::byte *buf, io_size_t n)
            -> task<expected<io_size_t, std::error_code>>
        {
            co_return read_some(buf, n);
        }

        [[nodiscard]] auto
        write_some_at(io_offset_t loc, std::byte const *buf, io_size_t n)
            -> expected<io_size_t, std::error_code>
        {
            return _write_some_at(loc, buf, n);
        }

        [[nodiscard]] auto write_some(std::byte const *buffer, io_size_t n)
            -> expected<io_size_t, std::error_code>
        {
            auto ret = write_some_at(_write_position, buffer, n);
            if (ret)
                _write_position += *ret;
            return ret;
        }

        [[nodiscard]] auto
        async_write_some_at(io_offset_t loc, std::byte const *buf, io_size_t n)
            -> task<expected<io_size_t, std::error_code>>
        {
            co_return write_some_at(loc, buf, n);
        }

        [[nodiscard]] auto async_write_some(std::byte const *buf, io_size_t n)
            -> task<expected<io_size_t, std::error_code>>
        {
            co_return write_some(buf, n);
        }

    private:
        std::size_t _read_position = 0;
        std::size_t _write_position = 0;
    };

    [[nodiscard]] inline auto make_memchannel(void *begin, void *end)
        -> memchannel
    {
        return memchannel(begin, end);
    }

    template <std::ranges::contiguous_range Range>
    [[nodiscard]] auto make_memchannel(Range &&r)
    {
        auto data = std::ranges::data(r);
        auto size = std::ranges::size(r);

        return make_memchannel(data, data + size);
    }

} // namespace sk

#endif // SK_CHANNEL_MEMCHANNEL_MEMCHANNEL_HXX
