/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_POSIX_FD_HXX_INCLUDED
#define SK_POSIX_FD_HXX_INCLUDED

#include <sys/types.h>
#include <unistd.h>

#include <system_error>

#include <sk/check.hxx>
#include <sk/expected.hxx>

namespace sk::posix {

    /*************************************************************************
     *
     * RAII wrapper for POSIX file descriptors.
     *
     * unique_fd: this handle can only have one owner.  The fd is not
     * copyable, but it can be moved.
     */

    struct unique_fd {
        static constexpr int invalid_fd = -1;

        // Create an empty unique_fd.
        unique_fd() noexcept : _fd(invalid_fd) {}

        // Create a unique_handle from a native handle.
        explicit unique_fd(int fd) noexcept : _fd(fd) {}

        // Move construction.
        unique_fd(unique_fd &&other) noexcept
            : _fd(std::exchange(other._fd, invalid_fd))
        {
        }

        // Move assignment.
        unique_fd &operator=(unique_fd &&other) noexcept
        {
            if (this == &other)
                return *this;

            close();
            _fd = std::exchange(other._fd, invalid_fd);
            return *this;
        }

        // Destructor.
        ~unique_fd() noexcept
        {
            close();
        }

        // Not copyable.
        unique_fd(unique_fd const &) = delete;
        unique_fd &operator=(unique_fd const &) = delete;

        // Assign a new value to this fd.
        auto assign(int fd) noexcept -> void
        {
            close();
            _fd = fd;
        }

        // Close the handle.
        auto close() noexcept -> std::error_code
        {
            if (_fd == invalid_fd)
                return {};

            if (::close(_fd))
                return {};
            else
                return {errno, std::system_category()};
        }

        // Test if we have a valid handle.
        operator bool() const noexcept
        {
            return _fd != invalid_fd;
        }

        // Return the fd.
        auto fd() -> int
        {
            SK_CHECK(_fd != invalid_fd, "attempt to access invalid handle");
            return _fd;
        }

        // Give up ownership of the fd
        auto release() -> int
        {
            return std::exchange(_fd, invalid_fd);
        }

    private:
        int _fd;
    };

} // namespace sk::posix

#endif // SK_POSIX_FD_HXX_INCLUDED
