/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_NET_DETAIL_POSIX_STREAMSOCKET_HXX_INCLUDED
#define SK_NET_DETAIL_POSIX_STREAMSOCKET_HXX_INCLUDED

#include <sys/types.h>
#include <sys/socket.h>

#include <cstddef>

#include <sk/async_invoke.hxx>
#include <sk/channel/concepts.hxx>
#include <sk/channel/error.hxx>
#include <sk/detail/safeint.hxx>
#include <sk/expected.hxx>
#include <sk/net/address.hxx>
#include <sk/posix/async_api.hxx>
#include <sk/posix/error.hxx>
#include <sk/posix/fd.hxx>
#include <sk/task.hxx>

namespace sk::posix::detail {

    template <int type, int protocol>
    class streamsocket {
    protected:
        streamsocket() = default;
        explicit streamsocket(sk::posix::unique_fd &&fd) noexcept;
        streamsocket(streamsocket &&) noexcept = default;
        auto operator=(streamsocket &&) noexcept -> streamsocket & = default;
        ~streamsocket();

        sk::posix::unique_fd _fd;

        [[nodiscard]] auto
        _async_connect(int af, sockaddr const *addr, socklen_t addrlen) noexcept
            -> task<expected<void, std::error_code>>;

        [[nodiscard]] auto
        _connect(int af, sockaddr const *addr, socklen_t addrlen) noexcept
            -> expected<void, std::error_code>;

    public:
        using value_type = std::byte;

        streamsocket(streamsocket const &) = delete;
        auto operator=(streamsocket const &) -> streamsocket & = delete;

        [[nodiscard]] auto is_open() const noexcept -> bool;

        [[nodiscard]] auto async_read_some(std::span<value_type> buf) noexcept
            -> task<expected<io_size_t, std::error_code>>;

        [[nodiscard]] auto read_some(std::span<value_type> buf) noexcept
            -> expected<io_size_t, std::error_code>;

        [[nodiscard]] auto
        async_write_some(std::span<value_type const> buf) noexcept
            -> task<expected<io_size_t, std::error_code>>;

        [[nodiscard]] auto write_some(std::span<value_type const> buf) noexcept
            -> expected<io_size_t, std::error_code>;

        [[nodiscard]] auto async_close() noexcept
            -> task<expected<void, std::error_code>>;

        [[nodiscard]] auto close() noexcept -> expected<void, std::error_code>;
    };

    /*************************************************************************
     * streamsocket::streamsocket()
     */

    template <int type, int protocol>
    streamsocket<type, protocol>::streamsocket(
        sk::posix::unique_fd &&fd) noexcept
        : _fd(std::move(fd))
    {
    }

    /*************************************************************************
     * streamsocket::~streamsocket()
     */

    template <int type, int protocol>
    streamsocket<type, protocol>::~streamsocket()
    {
        if (_fd) {
            auto reactor = weak_reactor_handle::get();
            reactor->deassociate_fd(_fd.value());
        }
    }

    /*************************************************************************
     * streamsocket::is_open()
     */

    template <int type, int protocol>
    auto streamsocket<type, protocol>::is_open() const noexcept -> bool
    {
        return _fd;
    }

    /*************************************************************************
     * tcpchannel::close()
     */
    template <int type, int protocol>
    auto streamsocket<type, protocol>::close() noexcept
        -> expected<void, std::error_code>
    {
        SK_CHECK(is_open(), "attempt to close a channel that isn't open");

        if (!is_open())
            return make_unexpected(error::channel_not_open);

        auto err = _fd.close();
        if (err)
            return make_unexpected(err);
        return {};
    }

    /*************************************************************************
     * streamsocket::async_close()
     */
    template <int type, int protocol>
    auto streamsocket<type, protocol>::async_close() noexcept
        -> task<expected<void, std::error_code>>
    {
        SK_CHECK(is_open(), "attempt to close a channel that isn't open");

        int fd = _fd.release();
        auto err = co_await sk::posix::async_fd_close(fd);

        if (!err)
            co_return make_unexpected(err.error());

        co_return {};
    }

    /*************************************************************************
     * streamsocket::async_connect()
     */
    template <int type, int protocol>
    auto streamsocket<type, protocol>::_async_connect(
        int af, sockaddr const *addr, socklen_t addrlen) noexcept
        -> task<expected<void, std::error_code>>
    {
        SK_CHECK(!is_open(), "attempt to re-connect an open channel");

        auto sock = ::socket(af, type, protocol);

        if (sock == -1)
            co_return make_unexpected(sk::posix::get_errno());

        sk::posix::unique_fd sock_(sock);

        auto ret = co_await sk::posix::async_fd_connect(sock, addr, addrlen);

        if (!ret)
            co_return make_unexpected(ret.error());

        auto reactor = weak_reactor_handle::get();
        auto aret = reactor->associate_fd(sock);
        if (!aret)
            co_return make_unexpected(aret.error());

        _fd = std::move(sock_);
        co_return {};
    }

    /*************************************************************************
     * streamsocket::connect()
     */
    template <int type, int protocol>
    auto streamsocket<type, protocol>::_connect(int af,
                                                sockaddr const *addr,
                                                socklen_t addrlen) noexcept
        -> expected<void, std::error_code>
    {
        return wait(_async_connect(af, addr, addrlen));
    }

    /*************************************************************************
     * streamsocket::async_read_some()
     */

    template <int type, int protocol>
    auto streamsocket<type, protocol>::async_read_some(
        std::span<value_type> buf) noexcept
        -> task<expected<io_size_t, std::error_code>>
    {
        SK_CHECK(is_open(), "attempt to read on a closed channel");

        auto bytes_read =
            co_await sk::posix::async_fd_recv(*_fd, buf.data(), buf.size(), 0);

        if (!bytes_read)
            co_return make_unexpected(bytes_read.error());

        // 0 bytes = client went away
        if (*bytes_read == 0)
            co_return make_unexpected(error::end_of_file);

        co_return *bytes_read;
    }

    /*************************************************************************
     * streamsocket::read_some()
     */

    template <int type, int protocol>
    auto
    streamsocket<type, protocol>::read_some(std::span<value_type> buf) noexcept
        -> expected<io_size_t, std::error_code>
    {
        SK_CHECK(is_open(), "attempt to read on a closed channel");
        return wait(async_read_some(buf));
    }

    /*************************************************************************
     * streamsocket::async_write_some()
     */

    template <int type, int protocol>
    auto streamsocket<type, protocol>::async_write_some(
        std::span<value_type const> buf) noexcept
        -> task<expected<io_size_t, std::error_code>>
    {
        SK_CHECK(is_open(), "attempt to write on a closed channel");

        auto bytes_read =
            co_await sk::posix::async_fd_send(*_fd, buf.data(), buf.size(), 0);

        if (!bytes_read)
            co_return make_unexpected(bytes_read.error());

        // 0 bytes = client went away
        if (*bytes_read == 0)
            co_return make_unexpected(sk::error::end_of_file);

        co_return *bytes_read;
    }

    /*************************************************************************
     * streamsocket::write_some()
     */

    template <int type, int protocol>
    auto streamsocket<type, protocol>::write_some(
        std::span<value_type const> buf) noexcept
        -> expected<io_size_t, std::error_code>
    {
        return wait(async_write_some(buf));
    }

    template <typename server_type,
              seqchannel channel_type,
              int type,
              int protocol>
    class streamsocketserver {
    protected:
        unique_fd _fd;

        // address_family is only used on Win32
        explicit streamsocketserver(unique_fd &&fd,
                                    int /*address_family*/) noexcept;
        streamsocketserver(streamsocketserver &&) noexcept = default;
        auto operator=(streamsocketserver &&) noexcept
            -> streamsocketserver & = default;
        ~streamsocketserver();

        [[nodiscard]] static auto
        _listen(int af, sockaddr const *addr, socklen_t addrlen) noexcept
            -> expected<server_type, std::error_code>;

    public:
        using value_type = std::byte;

        streamsocketserver(streamsocketserver const &) = delete;
        auto operator=(streamsocketserver const &)
            -> streamsocketserver & = delete;

        [[nodiscard]] auto is_open() const noexcept -> bool;

        [[nodiscard]] auto async_accept() noexcept
            -> task<expected<channel_type, std::error_code>>;

        [[nodiscard]] auto accept() noexcept
            -> expected<channel_type, std::error_code>;

        [[nodiscard]] auto async_close() noexcept
            -> task<expected<void, std::error_code>>;

        [[nodiscard]] auto close() noexcept -> expected<void, std::error_code>;
    };

    /*************************************************************************
     * streamsocketserver::streamsocketserver()
     */

    template <typename server_type,
              seqchannel channel_type,
              int type,
              int protocol>
    streamsocketserver<server_type, channel_type, type, protocol>::
        streamsocketserver(unique_fd &&fd, int /*address_family*/) noexcept
        : _fd(std::move(fd))
    {
    }

    /*************************************************************************
     * streamsocketserver::~streamsocketserver()
     */

    template <typename server_type,
              seqchannel channel_type,
              int type,
              int protocol>
    streamsocketserver<server_type, channel_type, type, protocol>::
        ~streamsocketserver()
    {
        if (_fd) {
            auto reactor = weak_reactor_handle::get();
            reactor->deassociate_fd(_fd.value());
        }
    }

    /*************************************************************************
     * streamsocketserver::is_open()
     */

    template <typename server_type,
              seqchannel channel_type,
              int type,
              int protocol>
    auto
    streamsocketserver<server_type, channel_type, type, protocol>::is_open()
        const noexcept -> bool
    {
        return _fd;
    }

    /*************************************************************************
     * streamsocketserver::listen()
     */

    template <typename server_type,
              seqchannel channel_type,
              int type,
              int protocol>
    auto streamsocketserver<server_type, channel_type, type, protocol>::_listen(
        int af, sockaddr const *addr, socklen_t addrlen) noexcept
        -> expected<server_type, std::error_code>
    {
        int listener = ::socket(af, type, protocol);

        if (listener == -1)
            return make_unexpected(sk::posix::get_errno());

        unique_fd listener_(listener);

#ifdef SK_CIO_PLATFORM_HAS_AF_UNIX
        if (af != AF_UNIX) {
#endif
            int one = 1;
            int ret = ::setsockopt(
                listener,
                SOL_SOCKET,
                SO_REUSEADDR,
                // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
                reinterpret_cast<char const *>(&one),
                sizeof(one));
            if (ret != 0)
                return make_unexpected(sk::posix::get_errno());
#ifdef SK_CIO_PLATFORM_HAS_AF_UNIX
        }
#endif

        auto ret = ::bind(listener, addr, addrlen);
        if (ret == -1)
            return make_unexpected(sk::posix::get_errno());

        ret = ::listen(listener, SOMAXCONN);
        if (ret == -1)
            return make_unexpected(sk::posix::get_errno());

        auto reactor = weak_reactor_handle::get();
        auto aret = reactor->associate_fd(listener);
        if (!aret)
            return make_unexpected(aret.error());

        return server_type{std::move(listener_), af};
    }

    /*************************************************************************
     * streamsocketserver::close()
     */
    template <typename server_type,
              seqchannel channel_type,
              int type,
              int protocol>
    auto streamsocketserver<server_type, channel_type, type, protocol>::
        close() noexcept -> expected<void, std::error_code>
    {
        if (!is_open())
            return make_unexpected(error::channel_not_open);

        auto err = _fd.close();
        if (err)
            return make_unexpected(err);
        return {};
    }

    /*************************************************************************
     * streamsocketserver::async_close()
     */
    template <typename server_type,
              seqchannel channel_type,
              int type,
              int protocol>
    auto streamsocketserver<server_type, channel_type, type, protocol>::
        async_close() noexcept -> task<expected<void, std::error_code>>
    {
        auto err = co_await async_invoke([&] { return _fd.close(); });

        if (err)
            co_return make_unexpected(err);

        co_return {};
    }

    /*************************************************************************
     * streamsocketserver::async_accept()
     */
    template <typename server_type,
              seqchannel channel_type,
              int type,
              int protocol>
    auto streamsocketserver<server_type, channel_type, type, protocol>::
        async_accept() noexcept -> task<expected<channel_type, std::error_code>>
    {
        auto client =
            co_await sk::posix::async_fd_accept(*_fd, nullptr, nullptr);
        if (!client)
            co_return make_unexpected(client.error());

        unique_fd client_(*client);

        auto reactor = weak_reactor_handle::get();
        auto aret = reactor->associate_fd(*client);
        if (!aret)
            co_return make_unexpected(aret.error());

        co_return channel_type{std::move(client_)};
    }

    /*************************************************************************
     * streamsocketserver::accept()
     */
    template <typename server_type,
              seqchannel channel_type,
              int type,
              int protocol>
    auto streamsocketserver<server_type, channel_type, type, protocol>::
        accept() noexcept -> expected<channel_type, std::error_code>
    {
        auto client = ::accept(*_fd, nullptr, nullptr);
        if (client < 0)
            return make_unexpected(get_errno());

        unique_fd client_(client);

        auto reactor = weak_reactor_handle::get();
        auto aret = reactor->associate_fd(client);
        if (!aret)
            return make_unexpected(aret.error());

        return channel_type{std::move(client_)};
    }

} // namespace sk::posix::detail

#endif // SK_NET_DETAIL_POSIX_STREAMSOCKET_HXX_INCLUDED
