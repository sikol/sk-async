/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_POSIX_DETAIL_FILECHANNEL_BASE_HXX
#define SK_POSIX_DETAIL_FILECHANNEL_BASE_HXX

#include <sys/types.h>
#include <fcntl.h>

#include <filesystem>
#include <system_error>

#include <sk/async_invoke.hxx>
#include <sk/buffer/buffer.hxx>
#include <sk/channel/concepts.hxx>
#include <sk/channel/error.hxx>
#include <sk/channel/types.hxx>
#include <sk/detail/safeint.hxx>
#include <sk/posix/async_api.hxx>
#include <sk/posix/error.hxx>
#include <sk/posix/fd.hxx>
#include <sk/reactor.hxx>
#include <sk/task.hxx>

namespace sk::posix::detail {

    /*************************************************************************
     *
     * filechannel_base: base class for file channels.
     *
     */

    class filechannel_base {
    public:
        filechannel_base(filechannel_base const &) = delete;
        auto operator=(filechannel_base const &) -> filechannel_base & = delete;

    protected:
        using value_type = std::byte;

        filechannel_base(filechannel_base &&) noexcept = default;
        auto operator=(filechannel_base &&) noexcept
            -> filechannel_base & = default;

        /*
         * Test if this channel has been opened.
         */
        [[nodiscard]] auto is_open() const noexcept -> bool;

        [[nodiscard]] auto async_close() noexcept
            -> task<expected<void, std::error_code>>;

        [[nodiscard]] auto close() noexcept -> expected<void, std::error_code>;

        [[nodiscard]] auto async_base_open(std::filesystem::path const &path,
                                           fileflag::flagset flags) noexcept
            -> task<expected<void, std::error_code>>;

        [[nodiscard]] auto base_open(std::filesystem::path const &path,
                                     fileflag::flagset flags) noexcept
            -> expected<void, std::error_code>;

        [[nodiscard]] static auto _make_flags(fileflag::flagset flags,
                                              int *open_flags) noexcept -> bool;

        filechannel_base() = default;
        ~filechannel_base() = default;

        posix::unique_fd _fd;
    };

    /*************************************************************************
     * filechannel_base::_make_flags()
     */
    inline auto filechannel_base::_make_flags(fileflag::flagset flags,
                                              int *open_flags) noexcept -> bool
    {
        *open_flags = 0;

        // Must specify either read or write.
        if (!any_set(flags, fileflags::read | fileflags::write))
            return false;

        // Read access only
        if (is_set(flags, fileflags::read) &&
            !is_set(flags, fileflags::write)) {
            // These flags are not valid for reading.
            if (any_set(flags,
                        fileflags::trunc | fileflags::append |
                            fileflags::create_new))
                return false;

            *open_flags = O_RDONLY;
            return true;
        }

        // Write access or read-write access
        if (is_set(flags, fileflags::write)) {
            // Must specify either create_new or open_existing (or both).
            if (!any_set(flags,
                         fileflags::create_new | fileflags::open_existing))
                return false;

            if (is_set(flags, fileflags::read))
                *open_flags = O_RDWR;
            else
                *open_flags = O_WRONLY;

            // Must create a new file.
            if (is_set(flags, fileflags::create_new) &&
                !is_set(flags, fileflags::open_existing))
                *open_flags |= O_CREAT | O_EXCL;
            // Can create a new file or open an existing one.
            else if (is_set(flags, fileflags::create_new) &&
                     is_set(flags, fileflags::open_existing)) {
                if (is_set(flags, fileflags::trunc))
                    *open_flags |= O_CREAT | O_TRUNC;
                else
                    *open_flags |= O_CREAT;
                // Can only open an existing file.
            } else if (!is_set(flags, fileflags::create_new) &&
                       is_set(flags, fileflags::open_existing)) {
                if (is_set(flags, fileflags::trunc))
                    *open_flags |= O_TRUNC;
                // else
                //    *open_flags |= 0;
            }

            return true;
        }

        return false;
    }

    /*************************************************************************
     * filechannel_base::async_open()
     */

    inline auto
    filechannel_base::async_base_open(std::filesystem::path const &path,
                                      fileflag::flagset flags) noexcept
        -> task<expected<void, std::error_code>>
    {
        if (is_open())
            co_return make_unexpected(error::channel_already_open);

        int open_flags = 0;

        if (!_make_flags(flags, &open_flags))
            co_return make_unexpected(error::filechannel_invalid_flags);

        auto native_path = path.native();
        if (native_path.find('\0') != decltype(native_path)::npos)
            co_return make_unexpected(make_error(ENOENT));

        // NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)
        auto fd = co_await async_fd_open(native_path.c_str(), open_flags, 0777);

        if (!fd)
            co_return make_unexpected(fd.error());

        _fd.assign(*fd);
        co_return {};
    }

    /*************************************************************************
     * filechannel_base::open()
     */

    inline auto filechannel_base::base_open(std::filesystem::path const &path,
                                            fileflag::flagset flags) noexcept
        -> expected<void, std::error_code>
    {
        if (is_open())
            return make_unexpected(error::channel_already_open);

        int open_flags = 0;

        if (!_make_flags(flags, &open_flags))
            return make_unexpected(error::filechannel_invalid_flags);

        auto native_path = path.native();
        if (native_path.find('\0') != decltype(native_path)::npos)
            return make_unexpected(make_error(ENOENT));

        // NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)
        auto fd = ::open(native_path.c_str(), open_flags, 0777);

        if (fd == -1)
            return make_unexpected(get_errno());

        _fd.assign(fd);
        return {};
    }

    /*************************************************************************
     * filechannel_base::is_open()
     */
    inline auto filechannel_base::is_open() const noexcept -> bool
    {
        return static_cast<bool>(_fd);
    }

    /*************************************************************************
     * filechannel_base::close()
     */
    inline auto filechannel_base::close() noexcept
        -> expected<void, std::error_code>
    {
        if (!is_open())
            return make_unexpected(sk::error::channel_not_open);

        auto err = _fd.close();
        if (err)
            return make_unexpected(err);
        return {};
    }

    /*************************************************************************
     * filechannel_base::async_close()
     */
    inline auto filechannel_base::async_close() noexcept
        -> task<expected<void, std::error_code>>
    {
        int fd = _fd.release();
        auto err = co_await async_fd_close(fd);

        if (!err)
            co_return make_unexpected(err.error());

        co_return {};
    }

    /*************************************************************************
     *
     * dafilechannel_base: base class for direct access file channels.
     *
     */

    class dafilechannel_base : protected filechannel_base {
    public:
        dafilechannel_base(dafilechannel_base const &) = delete;
        auto operator=(dafilechannel_base const &)
            -> dafilechannel_base & = delete;

    protected:
        using value_type = std::byte;

        dafilechannel_base(dafilechannel_base &&) noexcept = default;
        auto operator=(dafilechannel_base &&) noexcept
            -> dafilechannel_base & = default;

        [[nodiscard]] auto async_da_open(std::filesystem::path const &path,
                                         fileflag::flagset flags) noexcept
            -> task<expected<void, std::error_code>>
        {
            return async_base_open(path, flags);
        }

        [[nodiscard]] auto da_open(std::filesystem::path const &path,
                                   fileflag::flagset flags) noexcept
            -> expected<void, std::error_code>
        {
            return base_open(path, flags);
        }

        /*
         * Read data.
         */
        [[nodiscard]] auto
        async_read_some_at(io_offset_t loc, std::span<value_type> buf) noexcept
            -> task<expected<io_size_t, std::error_code>>;

        [[nodiscard]] auto read_some_at(io_offset_t loc,
                                        std::span<value_type> buf) noexcept
            -> expected<io_size_t, std::error_code>;

        /*
         * Write data.
         */
        [[nodiscard]] auto
        async_write_some_at(io_offset_t loc,
                            std::span<value_type const> buf) noexcept
            -> task<expected<io_size_t, std::error_code>>;

        [[nodiscard]] auto
        write_some_at(io_offset_t loc, std::span<value_type const> buf) noexcept
            -> expected<io_size_t, std::error_code>;

        dafilechannel_base() = default;
        ~dafilechannel_base() = default;
    };

    /*************************************************************************
     * dafilechannel_base::async_read_some_at()
     */

    inline auto
    dafilechannel_base::async_read_some_at(io_offset_t loc,
                                           std::span<value_type> buf) noexcept
        -> task<expected<io_size_t, std::error_code>>
    {
        SK_CHECK(is_open(), "attempt to read on a closed channel");

        auto ret = co_await async_fd_pread(
            *_fd, buf.data(), buf.size(), sk::detail::truncate<off_t>(loc));

        if (!ret)
            co_return make_unexpected(ret.error());

        if (*ret == 0)
            co_return make_unexpected(sk::error::end_of_file);

        co_return *ret;
    }

    /*************************************************************************
     * dafilechannel_base::read_some_at()
     */

    inline auto
    dafilechannel_base::read_some_at(io_offset_t loc,
                                     std::span<value_type> buf) noexcept
        -> expected<io_size_t, std::error_code>
    {
        SK_CHECK(is_open(), "attempt to read on a closed channel");

        auto ret = ::pread(
            *_fd, buf.data(), buf.size(), sk::detail::truncate<off_t>(loc));

        if (ret == -1)
            return make_unexpected(get_errno());

        if (ret == 0)
            return make_unexpected(sk::error::end_of_file);

        return ret;
    }

    /*************************************************************************
     * dafilechannel_base::async_write_some_at()
     */

    inline auto dafilechannel_base::async_write_some_at(
        io_offset_t loc, std::span<value_type const> buf) noexcept
        -> task<expected<io_size_t, std::error_code>>
    {
        SK_CHECK(is_open(), "attempt to read on a closed channel");

        auto ret = co_await async_fd_pwrite(
            *_fd, buf.data(), buf.size(), sk::detail::truncate<off_t>(loc));

        if (!ret)
            co_return make_unexpected(ret.error());

        co_return ret;
    }

    /*************************************************************************
     * dafilechannel_base::write_some_at()
     */

    inline auto
    dafilechannel_base::write_some_at(io_offset_t loc,
                                      std::span<value_type const> buf) noexcept
        -> expected<io_size_t, std::error_code>
    {
        SK_CHECK(is_open(), "attempt to read on a closed channel");

        auto ret = ::pwrite(
            *_fd, buf.data(), buf.size(), sk::detail::truncate<off_t>(loc));

        if (ret < 0)
            return make_unexpected(get_errno());

        return ret;
    }

    /*************************************************************************
     *
     * seqfilechannel_base: base class for sequential access file channels.
     *
     */

    class seqfilechannel_base : protected filechannel_base {
    public:
        seqfilechannel_base(seqfilechannel_base const &) = delete;
        auto operator=(seqfilechannel_base const &)
            -> seqfilechannel_base & = delete;

    protected:
        using value_type = std::byte;

        seqfilechannel_base(seqfilechannel_base &&) noexcept = default;
        auto operator=(seqfilechannel_base &&) noexcept
            -> seqfilechannel_base & = default;

        [[nodiscard]] auto async_seq_open(std::filesystem::path const &path,
                                          fileflag::flagset flags) noexcept
            -> task<expected<void, std::error_code>>
        {
            return async_base_open(path, flags);
        }

        [[nodiscard]] auto seq_open(std::filesystem::path const &path,
                                    fileflag::flagset flags) noexcept
            -> expected<void, std::error_code>
        {
            return base_open(path, flags);
        }

        /*
         * Read data.
         */
        [[nodiscard]] auto async_read_some(std::span<value_type> buf) noexcept
            -> task<expected<io_size_t, std::error_code>>;

        [[nodiscard]] auto read_some(std::span<value_type> buf) noexcept
            -> expected<io_size_t, std::error_code>;

        /*
         * Write data.
         */
        [[nodiscard]] auto async_write_some(std::span<value_type const> buf) noexcept
            -> task<expected<io_size_t, std::error_code>>;

        [[nodiscard]] auto write_some(std::span<value_type const> buf) noexcept
            -> expected<io_size_t, std::error_code>;

        seqfilechannel_base() = default;
        ~seqfilechannel_base() = default;
    };

    /*************************************************************************
     * seqfilechannel_base::async_read_some()
     */

    inline auto seqfilechannel_base::async_read_some(std::span<value_type> buf) noexcept
        -> task<expected<io_size_t, std::error_code>>
    {
        SK_CHECK(is_open(), "attempt to read on a closed channel");

        auto ret = co_await async_fd_read(*_fd, buf.data(), buf.size());

        if (!ret)
            co_return make_unexpected(ret.error());

        if (*ret == 0)
            co_return make_unexpected(error::end_of_file);

        co_return ret;
    }

    /*************************************************************************
     * seqfilechannel_base::_read_some()
     */

    inline auto seqfilechannel_base::read_some(std::span<value_type> buf) noexcept
        -> expected<io_size_t, std::error_code>
    {
        SK_CHECK(is_open(), "attempt to read on a closed channel");

        auto ret = ::read(*_fd, buf.data(), buf.size());

        if (ret == 0)
            return make_unexpected(error::end_of_file);

        if (ret < 0)
            return make_unexpected(get_errno());

        return ret;
    }

    /*************************************************************************
     * seqfilechannel::_async_write_some()
     */

    inline auto seqfilechannel_base::async_write_some(std::span<value_type const> buf) noexcept
        -> task<expected<io_size_t, std::error_code>>
    {
        SK_CHECK(is_open(), "attempt to read on a closed channel");

        auto ret = co_await async_fd_write(*_fd, buf.data(), buf.size());

        if (!ret)
            co_return make_unexpected(get_errno());

        co_return ret;
    }

    /*************************************************************************
     * seqfilechannel::_write_some()
     */

    inline auto seqfilechannel_base::write_some(std::span<value_type const> buf) noexcept
        -> expected<io_size_t, std::error_code>
    {
        SK_CHECK(is_open(), "attempt to read on a closed channel");

        auto ret = ::write(*_fd, buf.data(), buf.size());

        if (ret < 0)
            return make_unexpected(get_errno());

        return ret;
    }

} // namespace sk::posix::detail

#endif // SK_POSIX_DETAIL_FILECHANNEL_BASE_HXX
