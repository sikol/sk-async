/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_NET_ADDRESS_ADDRESS_HXX_INCLUDED
#define SK_NET_ADDRESS_ADDRESS_HXX_INCLUDED

#include <sk/detail/platform.hxx>

#if defined(SK_CIO_PLATFORM_WINDOWS)
#    include <sk/win32/windows.hxx>
#    ifdef SK_CIO_PLATFORM_HAS_AF_UNIX
#        include <afunix.h>
#    endif
#elif defined(SK_CIO_PLATFORM_POSIX)
#    define SK_CIO_HAVE_AF_UNIX
#    include <sys/types.h>
#    include <sys/socket.h>
#    include <sys/un.h>
#    include <arpa/inet.h>
#    include <netdb.h>
#endif

namespace sk::net {

    /*************************************************************************
     *
     * address: represents the address of a network endpoint; for IP endpoints
     * this will be a hostname and port.
     *
     */

    template <int address_family = AF_UNSPEC>
    struct address {
    };

    template <int af>
    [[nodiscard]] inline auto address_family(address<af> const &) -> int
    {
        return af;
    }

    template <int af>
    [[nodiscard]] inline auto address_length(address<af> const &addr)
        -> socklen_t
    {
        return addr.native_address_length;
    }

    template <typename To, typename From>
    struct address_caster {
    };

    template <int af>
    struct address_caster<sockaddr const *, address<af>> {
        auto cast(address<af> const &addr)
        {
            return reinterpret_cast<sockaddr const *>(&addr.native_address);
        }
    };

    template <typename To, typename From>
    auto address_cast(From &&from) -> expected<To, std::error_code>
    {
        return address_caster<std::remove_reference_t<To>,
                              std::remove_cvref_t<From>>()
            .cast(from);
    }

    template <int af1, int af2>
    bool operator==(address<af1> const &a, address<af2> const &b)
    {
        int af_a = address_family(a);
        int af_b = address_family(b);

        if (a.native_address_length != b.native_address_length)
            return false;

        if (af_a != af_b)
            return false;

        return std::memcmp(&a.native_address,
                           &b.native_address,
                           a.native_address_length) == 0;
    }

    template <int af1, int af2>
    bool operator<(address<af1> const &a, address<af2> const &b)
    {
        int af_a = address_family(a);
        int af_b = address_family(b);

        if (af_a != af_b)
            return af_a < af_b;

        if (a.native_address_length != b.native_address_length)
            return a.native_address_length < b.native_address_length;

        return std::memcmp(&a.native_address,
                           &b.native_address,
                           a.native_address_length) < 0;
    }

} // namespace sk::net

#endif // SRC_INCLUDE_SK_NET_ADDRESS_ADDRESS_HXX_INCLUDED
