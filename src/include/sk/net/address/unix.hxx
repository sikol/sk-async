/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_NET_ADDRESS_UNIX_HXX_INCLUDED
#define SK_NET_ADDRESS_UNIX_HXX_INCLUDED

#include <filesystem>
#include <span>

#include <sk/net/address/address.hxx>

#ifndef SK_CIO_PLATFORM_HAS_AF_UNIX
#    error AF_UNIX is not supported on this platform
#endif

namespace sk::net {

    // Address for the unix address family.
    template <>
    struct address<AF_UNIX> {
        sockaddr_un native_address{};
        socklen_t const native_address_length = sizeof(native_address);

        std::string path() const {
            std::span path(native_address.sun_path);
            return std::string(path.begin(), std::ranges::find(path, '\0'));
        }

        address() = default;

        address(address const &other)
        {
            std::memcpy(
                &native_address, &other.native_address, sizeof(native_address));
        }

        auto operator=(address const &other) -> address &
        {
            if (&other != this)
                std::memcpy(&native_address,
                            &other.native_address,
                            sizeof(native_address));
            return *this;
        }
    };

    using unix_address = address<AF_UNIX>;

    // Stringify a unix_address
    [[nodiscard]] inline auto str(unix_address const &addr)
        -> expected<std::string, std::error_code>
    {
        std::span path(addr.native_address.sun_path);
        return std::string(path.begin(), std::ranges::find(path, '\0'));
    }

    /*************************************************************************
     * make_unix_address: create an AF_UNIX address from a path.
     */
    [[nodiscard]] inline auto
    make_unix_address(std::filesystem::path const &path)
        -> expected<unix_address, std::error_code>
    {
        unix_address addr;

#ifdef SK_CIO_PLATFORM_WINDOWS
        // Windows wants UTF-8 in its sun_path.
        auto native_path = path.u8string();
#else
        auto native_path = path.string();
#endif

        if (native_path.size() > sizeof(addr.native_address.sun_path))
            return make_unexpected(
                std::make_error_code(std::errc::value_too_large));

        std::ranges::copy(native_path,
                          static_cast<char *>(addr.native_address.sun_path));
        addr.native_address.sun_family = AF_UNIX;
        return addr;
    }

    // unix_address <- sockaddr_un
    template <>
    struct address_caster<unix_address, sockaddr_un> {
        auto cast(sockaddr_un const &addr)
            -> expected<unix_address, std::error_code>
        {
            unix_address ret;
            static_assert(sizeof(ret.native_address) == sizeof(addr));
            std::memcpy(&ret.native_address, &addr, sizeof(ret.native_address));
            return ret;
        }
    };

    // unix_address <- sockaddr_storage
    template <>
    struct address_caster<unix_address, sockaddr_storage> {
        auto cast(sockaddr_storage const &addr)
            -> expected<unix_address, std::error_code>
        {
            if (addr.ss_family != AF_UNIX)
                return make_unexpected(std::make_error_code(
                    std::errc::address_family_not_supported));

            unix_address ret;

            static_assert(
                sizeof(addr) >= sizeof(ret.native_address),
                "addess_cast: sockaddr_storage is too small for AF_UNIX");

            std::memcpy(&ret.native_address, &addr, sizeof(ret.native_address));
            return ret;
        }
    };

} // namespace sk::net

#endif // SRC_INCLUDE_SK_NET_ADDRESS_UNIX_HXX_INCLUDED
