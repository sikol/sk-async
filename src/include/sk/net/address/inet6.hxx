/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_NET_ADDRESS_INET6_HXX_INCLUDED
#define SK_NET_ADDRESS_INET6_HXX_INCLUDED

#include <sk/net/address/address.hxx>

namespace sk::net {

    // Address for the inet6 address family (IPv6).
    template <>
    struct address<AF_INET6> {
        sockaddr_in6 native_address{};
        socklen_t const native_address_length = sizeof(native_address);

        auto port() const -> int {
            return htons(native_address.sin6_port);
        }

        address() = default;

        address(address const &other)
        {
            std::memcpy(
                &native_address, &other.native_address, sizeof(native_address));
        }

        auto operator=(address const &other) -> address &
        {
            if (&other != this)
                std::memcpy(&native_address,
                            &other.native_address,
                            sizeof(native_address));
            return *this;
        }
    };

    using inet6_address = address<AF_INET6>;

    // Create an inet_address from an address string and port.  The reason
    // we only accept an integer port here is that named service lookup can
    // block if the service database is on the network (e.g., NIS, LDAP).
    inline auto make_inet6_address(std::string const &host, int port = 0)
    -> expected<inet6_address, std::error_code>
    {
        inet6_address addr;

        auto ret =
            inet_pton(AF_INET6, host.c_str(), &addr.native_address.sin6_addr);
        if (ret != 1)
            return make_unexpected(
                std::make_error_code(std::errc::invalid_argument));

        if (port < 0 || port > 65535)
            return make_unexpected(
                std::make_error_code(std::errc::argument_out_of_domain));

        addr.native_address.sin6_port = htons(static_cast<std::uint16_t>(port));
        addr.native_address.sin6_family = AF_INET6;

        return addr;
    }

    // Stringify an inet6_address.
    inline auto str(inet6_address const &addr)
    -> expected<std::string, std::error_code>
    {
        char buf[INET_ADDRSTRLEN];

        auto ret =
            inet_ntop(AF_INET6, &addr.native_address.sin6_addr, buf, sizeof(buf));

        if (ret == nullptr)
            return make_unexpected(
                std::make_error_code(std::errc::invalid_argument));

        std::string ret_str(buf);
        if (addr.native_address.sin6_port != 0) {
            ret_str = '[' + ret_str + "]:";
            ret_str += std::to_string(ntohs(addr.native_address.sin6_port));
        }

        return ret_str;
    }

    // inet6_address <- sockaddr_storage
    template <>
    struct address_caster<inet6_address, sockaddr_storage> {
        auto cast(sockaddr_storage const &addr)
        -> expected<inet6_address, std::error_code>
        {
            if (addr.ss_family != AF_INET6)
                return make_unexpected(std::make_error_code(
                    std::errc::address_family_not_supported));

            inet6_address ret;

            static_assert(sizeof(addr) >= sizeof(ret.native_address),
                          "sockaddr_storage is broken");

            std::memcpy(&ret.native_address, &addr, sizeof(ret.native_address));
            return ret;
        }
    };

    // inet6_address <- sockaddr_in6
    template <>
    struct address_caster<inet6_address, sockaddr_in6> {
        auto cast(sockaddr_in6 const &sin)
        {
            inet6_address ret;

            static_assert(sizeof(ret.native_address) == sizeof(sin));

            std::memcpy(&ret.native_address, &sin, sizeof(sin));
            return ret;
        }
    };

    // inet6_address <- sockaddr
    template <>
    struct address_caster<inet6_address, sockaddr> {
        auto cast(sockaddr const &sa) -> expected<inet6_address, std::error_code>
        {
            if (sa.sa_family != AF_INET6)
                return make_unexpected(
                    std::make_error_code(std::errc::invalid_argument));

            inet6_address ret;

            std::memcpy(&ret.native_address, &sa, sizeof(sockaddr_in6));
            return ret;
        }
    };

} // namespace sk::net

#endif // SRC_INCLUDE_SK_NET_ADDRESS_INET6_HXX_INCLUDED
