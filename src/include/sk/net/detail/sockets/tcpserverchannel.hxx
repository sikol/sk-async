/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_NET_DETAIL_SOCKETS_TCPSERVERCHANNEL_HXX_INCLUDED
#define SK_NET_DETAIL_SOCKETS_TCPSERVERCHANNEL_HXX_INCLUDED

#include <cstddef>
#include <system_error>

#include <sk/channel/concepts.hxx>
#include <sk/expected.hxx>
#include <sk/net/address.hxx>
#include <sk/net/detail/sockets/sockets.hxx>
#include <sk/task.hxx>

namespace sk::net {

    class tcpserverchannel : public detail::streamsocketserver<tcpserverchannel,
                                                               tcpchannel,
                                                               SOCK_STREAM,
                                                               IPPROTO_TCP> {
        using socket_type = detail::streamsocketserver<tcpserverchannel,
                                                       tcpchannel,
                                                       SOCK_STREAM,
                                                       IPPROTO_TCP>;

    public:
        using value_type = std::byte;

        explicit tcpserverchannel(sk::net::detail::native_socket_type &&fd,
                                  int address_family)
            : socket_type(std::move(fd), address_family)
        {
        }

        tcpserverchannel(tcpserverchannel &&other) noexcept
            : socket_type(std::move(other))
        {
        }

        tcpserverchannel(tcpserverchannel const &) = delete;

        auto operator=(tcpserverchannel const &) -> tcpserverchannel & = delete;

        auto operator=(tcpserverchannel &&other) noexcept -> tcpserverchannel &
        {
            if (&other != this)
                socket_type::operator=(std::move(other));
            return *this;
        }

        ~tcpserverchannel() = default;
    };

} // namespace sk::net

#endif // SK_NET_DETAIL_SOCKETS_TCPSERVERCHANNEL_HXX_INCLUDED
