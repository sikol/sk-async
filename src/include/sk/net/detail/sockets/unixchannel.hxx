/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_NET_DETAIL_SOCKETS_UNIXCHANNEL_HXX_INCLUDED
#define SK_NET_DETAIL_SOCKETS_UNIXCHANNEL_HXX_INCLUDED

#include <cstddef>
#include <filesystem>

#include <sk/async_invoke.hxx>
#include <sk/channel/concepts.hxx>
#include <sk/detail/safeint.hxx>
#include <sk/expected.hxx>
#include <sk/net/address.hxx>
#include <sk/net/detail/sockets/sockets.hxx>
#include <sk/task.hxx>

namespace sk::net {

    class unixchannel : public detail::streamsocket<SOCK_STREAM, 0> {
        using socket_type = detail::streamsocket<SOCK_STREAM, 0>;

    public:
        unixchannel() = default;

        explicit unixchannel(sk::net::detail::native_socket_type &&fd)
            : socket_type(std::move(fd))
        {
        }

        unixchannel(unixchannel &&other) noexcept
            : socket_type(std::move(other))
        {
        }

        auto operator=(unixchannel &&other) noexcept -> unixchannel &
        {
            if (&other != this)
                socket_type::operator=(std::move(other));
            return *this;
        }

        ~unixchannel() = default;

        unixchannel(unixchannel const &) = delete;

        auto operator=(unixchannel const &) -> unixchannel & = delete;

        [[nodiscard]] auto connect(sk::net::address const &addr)
            -> expected<void, std::error_code>
        {
            if (addr.address_family() != AF_UNIX)
                return make_unexpected(std::make_error_code(
                    std::errc::address_family_not_supported));
            return socket_type::_connect(addr);
        }

        [[nodiscard]] auto connect(std::filesystem::path const &path)
            -> expected<void, std::error_code>
        {
            auto addr = net::make_unix_address(path);
            if (!addr)
                return make_unexpected(addr.error());
            return socket_type::_connect(*addr);
        }

        [[nodiscard]] auto async_connect(sk::net::address const &addr)
            -> task<expected<void, std::error_code>>
        {
            if (addr.address_family() != AF_UNIX)
                co_return make_unexpected(std::make_error_code(
                    std::errc::address_family_not_supported));
            co_return co_await socket_type::_async_connect(addr);
        }

        [[nodiscard]] auto async_connect(std::filesystem::path const &path)
            -> task<expected<void, std::error_code>>
        {
            auto addr = net::make_unix_address(path);
            if (!addr)
                co_return make_unexpected(addr.error());
            co_return co_await socket_type::_async_connect(*addr);
        }
    };

    static_assert(seqchannel<unixchannel>);

} // namespace sk::net

#endif // SK_NET_DETAIL_SOCKETS_UNIXCHANNEL_HXX_INCLUDED
