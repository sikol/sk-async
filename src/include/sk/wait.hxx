/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CIO_WAIT_HXX_INCLUDED
#define SK_CIO_WAIT_HXX_INCLUDED

#include <sk/reactor.hxx>
#include <sk/task.hxx>

namespace sk {

    struct wait_task {
        struct promise_type {
            std::promise<void> promise;
            executor *task_executor;

            auto get_return_object()
            {
                return wait_task(
                    coroutine_handle<promise_type>::from_promise(*this));
            }

            auto initial_suspend() -> suspend_always
            {
                return {};
            }

            struct final_awaiter {
                auto await_ready() noexcept -> bool
                {
                    return false;
                }

                void await_resume() noexcept {}

                void await_suspend(coroutine_handle<promise_type> h) noexcept
                {
                    h.promise().promise.set_value();
                }
            };

            auto final_suspend() noexcept -> final_awaiter
            {
                return {};
            }

            void unhandled_exception()
            {
                throw;
            }

            void return_void() noexcept {}
        };
        coroutine_handle<promise_type> coro_handle;

        explicit wait_task(coroutine_handle<promise_type> coro_handle_)
            : coro_handle(coro_handle_)
        {
            coro_handle.promise().task_executor =
                reactor_handle::get_global_reactor().get_executor();
        }

        wait_task(wait_task const &) = delete;
        auto operator=(wait_task const &) -> wait_task & = delete;
        auto operator=(wait_task &&other) -> wait_task & = delete;

        wait_task(wait_task &&other) noexcept
            : coro_handle(std::exchange(other.coro_handle, {}))
        {
            coro_handle.promise().task_executor =
                reactor_handle::get_global_reactor().get_executor();
        }

        ~wait_task()
        {
            if (coro_handle) {
                try {
                    coro_handle.destroy();
                } catch (...) {
                    std::terminate();
                }
            }
        }

        void start()
        {
            coro_handle.resume();
        }
    };

    template <typename T>
    auto _internal_wait(task<T> &&task_, T *v) -> wait_task
    {
        *v = co_await task_;
    }

    inline auto _internal_wait(task<void> &&task_) -> wait_task
    {
        co_await task_;
    }

    template <typename T>
    auto wait(task<T> &&task_) -> T
    {
        T ret;

        auto waitable = _internal_wait(std::move(task_), &ret);

        auto future = waitable.coro_handle.promise().promise.get_future();
        waitable.start();
        future.wait();

        return ret;
    }

    template <typename T>
    auto wait(task<T> &task_) -> T
    {
        return wait(std::move(task_));
    }

    template <>
    inline void wait(task<void> &&task_)
    {
        auto waitable = _internal_wait(std::move(task_));
        auto future = waitable.coro_handle.promise().promise.get_future();
        waitable.start();
        future.wait();
    }

    template <>
    inline void wait(task<void> &task_)
    {
        return wait(std::move(task_));
    }

} // namespace sk

#endif // SK_CIO_WAIT_HXX_INCLUDED
