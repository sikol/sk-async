/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CIO_WAIT_HXX_INCLUDED
#define SK_CIO_WAIT_HXX_INCLUDED

#include <sk/reactor.hxx>
#include <sk/task.hxx>

namespace sk {

    /*************************************************************************
     *
     * wait_executor: execute work on the current thread until the given task
     * is finished.
     */
    template<typename T>
    struct wait_executor final : executor {
        using work_type = std::function<void()>;

        wait_executor(task<T> &taskp) : _task(taskp) {}

        auto post(work_type &&work) -> void;
        auto run() -> void;

    private:
        task<T> &_task;
        std::condition_variable _cv;
        std::mutex _mtx;
        std::deque<work_type> _work;
    };

    // Called from the reactor thread.
    template<typename T>
    inline void wait_executor<T>::post(work_type &&work)
    {
        std::lock_guard<std::mutex> lock(_mtx);
        _work.push_back(std::move(work));
        _cv.notify_one();
    }

    // Called from the main thread.
    template<typename T>
    inline auto wait_executor<T>::run() -> void
    {
        for (;;) {
            std::unique_lock<std::mutex> lock(_mtx);
            _cv.wait(lock, [&] { return !_work.empty() || _task.coro_handle.done(); });

            if (_task.coro_handle.done())
                return;

            auto work = _work.front();
            _work.pop_front();
            lock.unlock();

            work();
        }
    }

    template<typename T>
    auto wait(task<T> &&taskp) -> T {
        wait_executor<T> xer(taskp);
        taskp.coro_handle.promise().task_executor = &xer;
        taskp.start();
        xer.run();
        return taskp.await_resume();
    }

    template<>
    inline auto wait(task<void> &&taskp) -> void {
        wait_executor<void> xer(taskp);
        taskp.coro_handle.promise().task_executor = &xer;
        taskp.start();
        xer.run();
        taskp.await_resume();
    }

} // namespace sk

#endif // SK_CIO_WAIT_HXX_INCLUDED
