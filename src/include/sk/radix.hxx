/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_RADIX_HXX_INCLUDED
#define SK_RADIX_HXX_INCLUDED

#include <concepts>
#include <cstdio>
#include <cstdlib>
#include <memory>
#include <ranges>
#include <span>
#include <vector>

#include <fmt/core.h>

namespace sk {

    enum struct radix_op : int {
        insert,
        find,
        remove,
    };

    template <typename Char, typename T>
    struct radix_node {
        using node_ptr = std::unique_ptr<radix_node>;

        radix_node() = default;
        template <std::ranges::range Range>
        radix_node(Range &&string_)
            : string(std::ranges::begin(string_), std::ranges::end(string_))
        {
        }

        std::vector<Char> string;
        std::optional<T> value;

        std::vector<node_ptr> edges;

        template <std::ranges::range Range>
        auto find(Range &&r, radix_op op) -> radix_node<Char, T> *
        {
            namespace stdr = std::ranges;

            // If r is empty, we are the edge for this string.
            if (stdr::size(r) == 0) {
                if (op == radix_op::remove)
                    value.reset();

                return this;
            }

            // Look for an existing edge.
            for (auto eit = edges.begin(), eend = edges.end(); eit != eend;
                 ++eit) {
                auto &e = *eit;

                auto mismatch = stdr::mismatch(r, e->string);

                auto matchlen = static_cast<std::size_t>(
                    std::distance(stdr::begin(e->string), mismatch.in2));

                if (matchlen == 0)
                    continue;

                // Found the child.
                if (matchlen == stdr::size(e->string)) {
                    auto sr = stdr::subrange(mismatch.in1, stdr::end(r));
                    auto ret = e->find(sr, op);
                    if (op != radix_op::remove)
                        return ret;

                    if (!e->value) {
                        if (e->edges.empty()) {
                            // If the child node has no value and no children,
                            // kill it.
                            edges.erase(eit);
                            return this;
                        }

                        if (e->edges.size() == 1) {
                            // If the child only has a single edge, unsplit it.
                            e->edges[0]->string.insert(
                                e->edges[0]->string.begin(),
                                e->string.begin(),
                                e->string.end());
                            auto ne = node_ptr(std::move(e->edges[0]));
                            edges.erase(eit);
                            edges.emplace_back(std::move(ne));
                            return this;
                        }
                    }

                    return ret;
                }

                if (op != radix_op::insert)
                    return nullptr;

                // Found a partial substring, split into two children.
                auto new_node = std::make_unique<radix_node>(stdr::subrange(
                    std::ranges::begin(r), stdr::begin(r) + matchlen));

                e->string.erase(e->string.begin(),
                                e->string.begin() + matchlen);
                new_node->edges.emplace_back(std::move(e));
                auto nr =
                    stdr::subrange(stdr::begin(r) + matchlen, stdr::end(r));
                edges.erase(eit);
                auto &nn = edges.emplace_back(std::move(new_node));

                return nn->find(nr, op);
            }

            if (op != radix_op::insert)
                return nullptr;

            // Add a new edge.
            auto new_edge = std::make_unique<radix_node>(r);
            edges.push_back(std::move(new_edge));
            return edges.back().get();
        }
    };

    template <typename Char, typename T>
    struct radix_tree {
        radix_node<Char, T> root;

        template <std::ranges::range Range>
        auto insert(Range &&r, T const &value) -> bool
        {
            auto *node = root.find(r, radix_op::insert);
            if (node->value)
                return false;

            node->value.emplace(value);
            return true;
        }

        template <std::ranges::range Range>
        auto remove(Range &&r) -> bool
        {
            auto *node = root.find(r, radix_op::remove);
            if (!node)
                return false;

            return true;
        }

        template <std::ranges::range Range>
        auto find(Range &&r) -> T *
        {
            auto node = root.find(r, radix_op::find);
            if (!node)
                return nullptr;
            if (!node->value)
                return nullptr;
            return &*node->value;
        }
    };

} // namespace sk

#endif // SK_RADIX_HXX_INCLUDED
