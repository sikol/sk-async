/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CIO_WORKQ_HXX_INCLUDED
#define SK_CIO_WORKQ_HXX_INCLUDED

#include <condition_variable>
#include <deque>
#include <functional>
#include <mutex>
#include <thread>
#include <vector>

namespace sk {

    /*************************************************************************
     *
     * workq: queue for distributing work to threads.
     *
     */

    struct workq {
        typedef std::function<void()> work_type;

        // Post work to the queue
        auto post(work_type &&work) -> void;

        // Run the workq until the exit flag is set.
        auto run() -> void;

        // Start n threads which all run the workq.
        auto start_threads(unsigned int nthreads =
                               std::thread::hardware_concurrency()) -> void;

        // Shut down the work queue and wait for all executing
        // threads to exit.
        auto stop() -> void;

    private:
        std::condition_variable _cv;
        std::mutex _mtx;
        std::deque<work_type> _work;
        std::vector<std::thread> _threads;
        bool _stop = false;
    };

    inline void workq::post(work_type &&work)
    {
        std::lock_guard<std::mutex> lock(_mtx);
        _work.push_back(std::move(work));
        _cv.notify_one();
    }

    inline auto workq::run() -> void
    {
        for (;;) {
            std::unique_lock<std::mutex> lock(_mtx);
            _cv.wait(lock, [&] { return !_work.empty() || _stop; });

            if (_stop)
                return;

            auto work = _work.front();
            _work.pop_front();
            lock.unlock();

            work();
        }
    }

    inline auto workq::stop() -> void
    {
        std::unique_lock<std::mutex> lock(_mtx);
        _stop = true;
        _cv.notify_all();
        lock.unlock();

        while (!_threads.empty()) {
            _threads.back().join();
            _threads.pop_back();
        }
    }

    inline auto workq::start_threads(unsigned int nthreads) -> void
    {
        if (nthreads == 0)
            nthreads = 1;

        while (nthreads--)
            _threads.emplace_back(&workq::run, this);
    }

} // namespace sk

#endif // SK_CIO_WORKQ_HXX_INCLUDED
