/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CIO_DETACH_TASK_HXX_INCLUDED
#define SK_CIO_DETACH_TASK_HXX_INCLUDED

#include <sk/reactor.hxx>
#include <sk/detail/coroutine.hxx>

namespace sk {

    struct detach_promise {
        auto get_return_object()
        {
            return coroutine_handle<detach_promise>::from_promise(
                *this);
        }

        suspend_always initial_suspend()
        {
            //std::cerr << "task_promise<void> initial_suspend\n";
            return {};
        }

        suspend_never final_suspend() noexcept
        {
            //std::cerr << "task_promise<void> final_suspend\n";
            return {};
        }

        void unhandled_exception()
        {
            throw;
        }

        void return_void() noexcept
        {
            //std::cerr << "task_promise<void>: return_void\n";
        }
    };

    struct detach_task {
        using promise_type = detach_promise;
        coroutine_handle<promise_type> coro_handle;

        detach_task(coroutine_handle<promise_type> coro_handle_)
            : coro_handle(coro_handle_)
        {
        }

        detach_task(detach_task const &) = delete;
        detach_task &operator=(detach_task const &) = delete;
        detach_task &operator=(detach_task &&other) = delete;

        detach_task(detach_task &&other) noexcept
            : coro_handle(std::exchange(other.coro_handle, {}))
        {
        }

        ~detach_task()
        {
            //if (coro_handle)
            //    coro_handle.destroy();
        }

        void start()
        {
            coro_handle.resume();
        }
    };

    template<typename T>
    auto _internal_detach(task<T> &&task_) -> detach_task {
        task<T> taskp(std::move(task_));
        taskp.coro_handle.promise().previous = {};
        co_await taskp;
    }

    template <typename T>
    void co_detach(task<T> &&task_)
    {
        auto detach_task = _internal_detach(std::move(task_));
        detach_task.start();
    }

} // namespace sk::cio

#endif // SK_CIO_WIN32_SPAWN_HXX_INCLUDED
