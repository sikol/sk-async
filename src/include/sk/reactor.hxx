/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_REACTOR_HXX_INCLUDED
#define SK_REACTOR_HXX_INCLUDED

#include <mutex>

#include <sk/detail/platform.hxx>

#if defined(SK_CIO_PLATFORM_WINDOWS)
#    include <sk/win32/detail/iocp_reactor.hxx>

namespace sk {

    using system_reactor_type = win32::detail::iocp_reactor;

} // namespace sk

#elif defined(SK_CIO_PLATFORM_LINUX)
#    include <sk/posix/detail/linux_reactor.hxx>

namespace sk {

    using system_reactor_type = posix::detail::linux_reactor;

} // namespace sk

#else

#    error reactor is not supported on this platform

#endif

namespace sk {

    namespace detail {

        inline auto get_global_reactor() noexcept -> system_reactor_type &
        {
            static system_reactor_type global_reactor;
            return global_reactor;
        }

        inline std::atomic<int> reactor_refs = 0;
        inline std::mutex reactor_mutex;

    } // namespace detail

    class shared_reactor_handle {
        bool _valid = false;

        friend auto get_shared_reactor_handle() noexcept
            -> expected<shared_reactor_handle, std::error_code>;

    public:
        shared_reactor_handle() noexcept = default;
        ~shared_reactor_handle();

        shared_reactor_handle(shared_reactor_handle const &) = delete;
        shared_reactor_handle(shared_reactor_handle &&) noexcept;
        auto operator=(shared_reactor_handle const &)
            -> shared_reactor_handle & = delete;
        auto operator=(shared_reactor_handle &&)
            -> shared_reactor_handle & = delete;

        auto operator*() noexcept -> system_reactor_type &;
        auto operator->() noexcept -> system_reactor_type *;
    };

    // Get a handle to the global reactor, starting it if required.
    inline auto get_shared_reactor_handle() noexcept
        -> expected<shared_reactor_handle, std::error_code>
    {
        std::lock_guard<std::mutex> lock(detail::reactor_mutex);

        shared_reactor_handle handle;

        if (detail::reactor_refs == 0) {
            // We are the first handle.
            auto &global_reactor = detail::get_global_reactor();
            if (auto ret = global_reactor.start(); !ret)
                return make_unexpected(ret.error());
        }

        ++detail::reactor_refs;
        handle._valid = true;
        return handle;
    }

    inline shared_reactor_handle::shared_reactor_handle(
        shared_reactor_handle &&other) noexcept
        : _valid(std::exchange(other._valid, false))
    {
    }

    inline auto shared_reactor_handle::operator*() noexcept
        -> system_reactor_type &
    {
        SK_CHECK(_valid, "attempt to dereference invalid reactor_handle");
        return detail::get_global_reactor();
    }

    inline auto shared_reactor_handle::operator->() noexcept
        -> system_reactor_type *
    {
        SK_CHECK(_valid, "attempt to dereference invalid reactor_handle");
        return &detail::get_global_reactor();
    }

    inline shared_reactor_handle::~shared_reactor_handle()
    {
        if (!_valid)
            return;

        if (--detail::reactor_refs > 0)
            return;

        detail::get_global_reactor().stop();
    }

    class weak_reactor_handle {
        bool _valid = false;

        friend auto get_weak_reactor_handle() noexcept -> weak_reactor_handle;

    public:
        weak_reactor_handle() noexcept = default;
        ~weak_reactor_handle();

        weak_reactor_handle(weak_reactor_handle const &) = delete;
        weak_reactor_handle(weak_reactor_handle &&) noexcept;
        auto operator=(weak_reactor_handle const &)
            -> weak_reactor_handle & = delete;
        auto operator=(weak_reactor_handle &&)
            -> weak_reactor_handle & = delete;

        auto operator*() noexcept -> system_reactor_type &;
        auto operator->() noexcept -> system_reactor_type *;
    };

    // Get a handle to the global reactor, which must already have been started.
    inline auto get_weak_reactor_handle() noexcept -> weak_reactor_handle
    {
        auto refs = ++detail::reactor_refs;
        SK_CHECK(refs > 1, "get_weak_reactor_handle: no reactor");
        std::ignore = refs;

        weak_reactor_handle handle;
        handle._valid = true;
        return handle;
    }

    inline weak_reactor_handle::weak_reactor_handle(
        weak_reactor_handle &&other) noexcept
        : _valid(std::exchange(other._valid, false))
    {
    }

    inline auto weak_reactor_handle::operator*() noexcept
        -> system_reactor_type &
    {
        SK_CHECK(_valid, "attempt to dereference invalid reactor_handle");
        return detail::get_global_reactor();
    }

    inline auto weak_reactor_handle::operator->() noexcept
        -> system_reactor_type *
    {
        SK_CHECK(_valid, "attempt to dereference invalid reactor_handle");
        return &detail::get_global_reactor();
    }

    inline weak_reactor_handle::~weak_reactor_handle()
    {
        if (!_valid)
            return;

        auto r = --detail::reactor_refs;
        // refs should never be 0 here since there must always be a
        // shared_reactor_handle holding a ref.
        SK_CHECK(r > 0, "weak_reactor_handle: lifetime error");
        std::ignore = r;
    }

} // namespace sk

#endif // SK_REACTOR_HXX_INCLUDED
