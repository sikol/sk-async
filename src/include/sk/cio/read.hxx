/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CIO_READ_HXX_INCLUDED
#define SK_CIO_READ_HXX_INCLUDED

#include <sk/cio/channel/concepts.hxx>
#include <sk/cio/detail/safeint.hxx>
#include <sk/cio/error.hxx>
#include <sk/cio/expected.hxx>

namespace sk::cio {

    /*************************************************************************
     *
     * Channel input.
     *
     */

    /*************************************************************************
     * read_some()
     */

    // clang-format off
    template<iseqchannel Channel, std::ranges::contiguous_range Range>
    [[nodiscard]]
    auto read_some(Channel &channel,
                   Range &&range,
                   io_size_t n = unlimited)
        -> expected<io_size_t, std::error_code>
    requires std::same_as<channel_value_t<Channel>,
                          std::ranges::range_value_t<Range>>
    // clang-format on
    {
        auto data = std::ranges::data(range);
        auto size = cio::detail::int_cast<io_size_t>(std::ranges::size(range));
        if (n < size)
            size = n;

        return channel.read_some(data, size);
    }

    // clang-format off
    template<iseqchannel Channel, std::ranges::contiguous_range Range>
    [[nodiscard]]
    auto async_read_some(Channel &channel,
                         Range &&range,
                         io_size_t n = unlimited)
        -> task<expected<io_size_t, std::error_code>>
    requires std::same_as<channel_value_t<Channel>,
                          std::ranges::range_value_t<Range>>
    // clang-format on
    {
        auto data = std::ranges::data(range);
        auto size = cio::detail::int_cast<io_size_t>(std::ranges::size(range));
        if (n < size)
            size = n;

        return channel.async_read_some(data, size);
    }

    // clang-format off
    template<iseqchannel Channel, sk::writable_buffer Buffer>
    [[nodiscard]]
    auto read_some(Channel &channel,
                   Buffer &buffer,
                   io_size_t n = unlimited)
        -> expected<io_size_t, std::error_code>
    requires std::same_as<channel_value_t<Channel>,
                          sk::buffer_value_t<Buffer>>
    // clang-format on
    {
        auto ranges = buffer.writable_ranges();
        if (std::ranges::size(ranges) == 0)
            return 0u;

        auto &first_range = *std::ranges::begin(ranges);
        auto nread = read_some(channel, first_range, n);

        if (nread)
            buffer.commit(*nread);

        return nread;
    }

    // clang-format off
    template<iseqchannel Channel, sk::writable_buffer Buffer>
    [[nodiscard]]
    auto async_read_some(Channel &channel,
                         Buffer &buffer,
                         io_size_t n = unlimited)
        -> task<expected<io_size_t, std::error_code>>
           requires std::same_as<channel_value_t<Channel>,
                                  sk::buffer_value_t<Buffer>>
    // clang-format on
    {
        auto ranges = buffer.writable_ranges();
        if (std::ranges::size(ranges) == 0)
            co_return 0u;

        auto first_range = *std::ranges::begin(ranges);
        auto nread = co_await async_read_some(channel, first_range, n);

        if (nread)
            buffer.commit(*nread);

        co_return nread;
    }

    /*************************************************************************
     * read_some_at()
     */

    // clang-format off
    template<idachannel Channel, std::ranges::contiguous_range Range>
    [[nodiscard]]
    auto read_some_at(Channel &channel,
                      io_offset_t loc,
                      Range &&range,
                      io_size_t n = unlimited)
        -> expected<io_size_t, std::error_code>
    requires std::same_as<channel_value_t<Channel>,
                          std::ranges::range_value_t<Range>>
    // clang-format on
    {
        auto data = std::ranges::data(range);
        auto size = cio::detail::int_cast<io_size_t>(std::ranges::size(range));
        if (n < size)
            size = n;

        return channel.read_some_at(loc, data, size);
    }

    // clang-format off
    template <idachannel Channel, std::ranges::contiguous_range Range>
    [[nodiscard]]
    auto async_read_some_at(Channel &channel,
                            io_offset_t loc,
                            Range &&range,
                            io_size_t n = unlimited)
        -> task<expected<io_size_t, std::error_code>>
    requires std::same_as<channel_value_t<Channel>,
                          std::ranges::range_value_t<Range>>
    // clang-format on
    {
        auto data = std::ranges::data(range);
        auto size = cio::detail::int_cast<io_size_t>(std::ranges::size(range));
        if (n < size)
            size = n;

        co_return co_await channel.async_read_some_at(loc, data, size);
    }

    // clang-format off
    template <idachannel Channel, sk::writable_buffer Buffer>
    [[nodiscard]]
    auto read_some_at(Channel &channel,
                      io_offset_t loc,
                      Buffer &buffer,
                      io_size_t n = unlimited)
        -> expected<io_size_t, std::error_code>
    requires std::same_as<channel_value_t<Channel>,
                          sk::buffer_value_t<Buffer>>
    // clang-format on
    {
        auto ranges = buffer.writable_ranges();
        if (std::ranges::size(ranges) == 0u)
            return 0u;

        auto &first_range = *std::ranges::begin(ranges);

        auto nread = read_some_at(channel, loc, first_range, n);
        if (nread)
            buffer.commit(*nread);
        return nread;
    }

    // clang-format off
    template <idachannel Channel, sk::writable_buffer Buffer>
    [[nodiscard]]
    auto async_read_some_at(Channel &channel,
                            io_offset_t loc,
                            Buffer &buffer,
                            io_size_t n = unlimited)
        -> task<expected<io_size_t, std::error_code>>
    requires std::same_as<channel_value_t<Channel>,
                          sk::buffer_value_t<Buffer>>
    // clang-format on
    {
        auto ranges = buffer.writable_ranges();
        if (std::ranges::size(ranges) == 0u)
            co_return 0u;

        auto &first_range = *std::ranges::begin(ranges);

        auto nread = co_await async_read_some_at(channel, loc, first_range, n);
        if (nread)
            buffer.commit(*nread);
        co_return nread;
    }

    /*************************************************************************
     * read_all()
     */

    // clang-format off
    template <oseqchannel Channel, std::ranges::contiguous_range Range>
    [[nodiscard]]
    auto read_all(Channel &channel,
                  Range &&range,
                  io_size_t n = unlimited)
        -> std::pair<io_size_t, std::error_code>
    requires std::same_as<channel_const_value_t<Channel>,
                          std::add_const_t<std::ranges::range_value_t<Range>>>
    // clang-format on
    {
        auto data = std::ranges::data(range);
        auto size = cio::detail::int_cast<io_size_t>(std::ranges::size(range));
        if (n < size)
            size = n;

        io_size_t bytes_read = 0;

        while (size) {
            auto ret = channel.read_some(data, size);

            if (!ret)
                return {bytes_read, ret.error()};

            bytes_read += *ret;
            size -= *ret;
            data += *ret;
        }

        return {bytes_read, sk::cio::error::no_error};
    }

    // clang-format off
    template <oseqchannel Channel, std::ranges::contiguous_range Range>
    [[nodiscard]]
    auto async_read_all(Channel &channel,
                        Range &&range,
                        io_size_t n = unlimited)
        -> task<std::pair<io_size_t, std::error_code>>
    requires std::same_as<channel_value_t<Channel>,
                          std::ranges::range_value_t<Range>>
    // clang-format on
    {
        auto data = std::ranges::data(range);
        auto size = cio::detail::int_cast<io_size_t>(std::ranges::size(range));
        if (n < size)
            size = n;

        io_size_t bytes_read = 0;

        while (size) {
            auto ret = co_await channel.async_read_some(data, size);

            if (!ret)
                co_return {bytes_read, ret.error()};

            bytes_read += *ret;
            size -= *ret;
            data += *ret;
        }

        co_return {bytes_read, sk::cio::error::no_error};
    }

    // clang-format off
    template <oseqchannel Channel, sk::readable_buffer Buffer>
    [[nodiscard]]
    auto read_all(Channel &channel,
                  Buffer &buffer,
                  io_size_t n = unlimited)
        -> std::pair<io_size_t, std::error_code>
    requires std::same_as<channel_value_t<Channel>,
                          sk::buffer_value_t<Buffer>>
    // clang-format on
    {
        io_size_t bytes_read = 0;
        std::pair<io_size_t, std::error_code> ret;

        for (auto &&range : buffer.writable_ranges()) {
            ret = read_all(channel, range, n - bytes_read);
            bytes_read += ret.first;

            if (ret.first == 0 || ret.second)
                break;
        }

        buffer.commit(bytes_read);
        return {bytes_read, ret.second};
    }

    // clang-format off
    template <oseqchannel Channel, sk::readable_buffer Buffer>
    [[nodiscard]]
    auto async_read_all(Channel &channel,
                        Buffer &buffer,
                        io_size_t n = unlimited)
        -> task<std::pair<io_size_t, std::error_code>>
    requires std::same_as<channel_value_t<Channel>,
                          sk::buffer_value_t<Buffer>>
    // clang-format on
    {
        io_size_t bytes_read = 0;
        std::pair<io_size_t, std::error_code> ret;

        for (auto &&range : buffer.writable_ranges()) {
            ret = co_await async_read_all(channel, range, n - bytes_read);
            bytes_read += ret.first;

            if (ret.first == 0 || ret.second)
                break;
        }

        buffer.commit(bytes_read);
        co_return {bytes_read, ret.second};
    }

} // namespace sk::cio

#endif // SK_CIO_READ_HXX_INCLUDED
