/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CIO_POSIX_EPOLL_REACTOR_HXX_INCLUDED
#define SK_CIO_POSIX_EPOLL_REACTOR_HXX_INCLUDED

#include <sys/types.h>
#include <sys/epoll.h>

#include <coroutine>
#include <iostream>
#include <system_error>
#include <thread>

#include <sk/cio/concepts.hxx>
#include <sk/cio/posix/fd.hxx>
#include <sk/cio/task.hxx>
#include <sk/cio/workq.hxx>

namespace sk::cio::posix {

    struct epoll_coro_state {
        bool was_pending;
        int ret;
        int error;
        std::coroutine_handle<> coro_handle;
        std::mutex mutex;
    };

    struct fd_state {
        fd_state(int fd_) : fd(fd_), read_waiter(nullptr), write_waiter(nullptr)
        {
            event.data.fd = fd;
            event.events = EPOLLET | EPOLLONESHOT;
        }

        int fd;
        struct epoll_event event;
        epoll_coro_state *read_waiter;
        epoll_coro_state *write_waiter;
    };

    struct epoll_reactor {

        epoll_reactor();

        // Not copyable.
        epoll_reactor(epoll_reactor const &) = delete;
        epoll_reactor &operator=(epoll_reactor const &) = delete;

        // Movable.
        epoll_reactor(epoll_reactor &&) noexcept = default;
        epoll_reactor &operator=(epoll_reactor &&) noexcept = default;

        unique_fd epoll_fd;

        // Associate a new fd with our epoll.
        auto associate_fd(int) -> void;
        auto deassociate_fd(int) -> void;

        // Register interest in an fd
        auto register_read_interest(int fd, epoll_coro_state *state) -> void;
        auto register_write_interest(int fd, epoll_coro_state *state) -> void;

        // Start this reactor.
        auto start() -> void;

        // Stop this reactor.
        auto stop() -> void;

        // Post work to the reactor's thread pool.
        auto post(std::function<void()> fn) -> void;

    private:
        std::mutex _state_mtx;
        std::vector<std::unique_ptr<fd_state>> _state;

        workq _workq;
        void epoll_thread_fn(void);
        std::jthread epoll_thread;
        int shutdown_pipe[2];
    };

    static_assert(reactor<epoll_reactor>);

}; // namespace sk::cio::posix

#endif // SK_CIO_POSIX_EPOLL_REACTOR_HXX_INCLUDED
