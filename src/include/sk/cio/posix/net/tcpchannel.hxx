/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CIO_POSIX_NET_TCPCHANNEL_HXX_INCLUDED
#define SK_CIO_POSIX_NET_TCPCHANNEL_HXX_INCLUDED

#include <sys/types.h>
#include <sys/socket.h>

#include <cstddef>

#include <sk/cio/async_invoke.hxx>
#include <sk/cio/channel/concepts.hxx>
#include <sk/cio/detail/safeint.hxx>
#include <sk/cio/expected.hxx>
#include <sk/cio/net/address.hxx>
#include <sk/cio/task.hxx>
#include <sk/cio/posix/async_api.hxx>
#include <sk/cio/posix/fd.hxx>
#include <sk/cio/posix/error.hxx>

namespace sk::cio::posix::net {

    struct tcpchannel {
        using value_type = std::byte;

        tcpchannel();
        tcpchannel(unique_fd &&);
        tcpchannel(tcpchannel const &) = delete;
        tcpchannel(tcpchannel &&) noexcept = default;
        tcpchannel &operator=(tcpchannel const &) = delete;
        tcpchannel &operator=(tcpchannel &&) noexcept = default;
        ~tcpchannel() = default;

        /*
         * Test if this channel has been opened.
         */
        auto is_open() const -> bool;

        /*
         * Connect to a remote host.
         */
        [[nodiscard]] auto async_connect(cio::net::address const &addr)
            -> task<expected<void, std::error_code>>;

        [[nodiscard]] auto connect(cio::net::address const &addr)
            -> expected<void, std::error_code>;

        /*
         * Read data.
         */
        [[nodiscard]] auto async_read_some(value_type *buffer, io_size_t n)
            -> task<expected<io_size_t, std::error_code>>;

        [[nodiscard]] auto read_some(value_type *buffer, io_size_t n)
            -> expected<io_size_t, std::error_code>;

        /*
         * Write data.
         */
        [[nodiscard]] auto async_write_some(value_type const *buffer, io_size_t)
            -> task<expected<io_size_t, std::error_code>>;

        [[nodiscard]] auto write_some(value_type const *buffer, io_size_t)
            -> expected<io_size_t, std::error_code>;

        /*
         * Close the socket.
         */
        [[nodiscard]] auto async_close()
            -> task<expected<void, std::error_code>>;

        [[nodiscard]] auto close() -> expected<void, std::error_code>;

    private:
        unique_fd _fd;
    };

    static_assert(seqchannel<tcpchannel>);

    /*************************************************************************
     * tcpchannel::tcpchannel()
     */

    inline tcpchannel::tcpchannel() {}

    inline tcpchannel::tcpchannel(unique_fd &&sock) : _fd(std::move(sock)) {}

    /*************************************************************************
     * tcpchannel::is_open()
     */

    inline auto tcpchannel::is_open() const -> bool
    {
        return _fd;
    }

    /*************************************************************************
     * tcpchannel::close()
     */
    inline auto tcpchannel::close() -> expected<void, std::error_code>
    {

        if (!is_open())
            return make_unexpected(cio::error::channel_not_open);

        auto err = _fd.close();
        if (err)
            return make_unexpected(err);
        return {};
    }

    /*************************************************************************
     * tcpchannel::async_close()
     */
    inline auto tcpchannel::async_close()
        -> task<expected<void, std::error_code>>
    {

        auto err = co_await async_invoke([&]() { return _fd.close(); });

        if (err)
            co_return make_unexpected(err);

        co_return {};
    }

    /*************************************************************************
     * tcpchannel::async_connect()
     */
    inline auto tcpchannel::async_connect(cio::net::address const &addr)
        -> task<expected<void, std::error_code>>
    {

        SK_CHECK(is_open(), "attempt to connect on a closed channel");

        auto sock = ::socket(addr.address_family(), SOCK_STREAM, IPPROTO_TCP);

        if (sock == -1)
            co_return make_unexpected(get_errno());

        unique_fd sock_(sock);

        auto ret = co_await async_fd_connect(
            _fd.fd(),
            reinterpret_cast<sockaddr const *>(&addr.native_address),
            addr.native_address_length);

        if (!ret)
            co_return make_unexpected(ret.error());

        reactor_handle::get_global_reactor().associate_fd(sock);
        _fd = std::move(sock_);
    }

    /*************************************************************************
     * tcpchannel::connect()
     */
    inline auto tcpchannel::connect(cio::net::address const &addr)
        -> expected<void, std::error_code>
    {
        return wait(async_connect(addr));
    }

    /*************************************************************************
     * tcpchannel::async_read_some()
     */

    inline auto tcpchannel::async_read_some(value_type *buffer, io_size_t nobjs)
        -> task<expected<io_size_t, std::error_code>>
    {
        SK_CHECK(is_open(), "attempt to read on a closed channel");

        auto bytes_read = co_await async_fd_recv(_fd.fd(), buffer, nobjs, 0);

        if (!bytes_read)
            co_return make_unexpected(bytes_read.error());

        // 0 bytes = client went away
        if (*bytes_read == 0)
            co_return make_unexpected(cio::error::end_of_file);

        co_return *bytes_read;
    }

    /*************************************************************************
     * tcpchannel::read_some()
     */

    inline auto tcpchannel::read_some(value_type *buffer, io_size_t nobjs)
        -> expected<io_size_t, std::error_code>
    {
        SK_CHECK(is_open(), "attempt to read on a closed channel");
        return wait(async_read_some(buffer, nobjs));
    }

    /*************************************************************************
     * tcpchannel::async_write_some()
     */

    inline auto tcpchannel::async_write_some(value_type const *buffer,
                                             io_size_t nobjs)
        -> task<expected<io_size_t, std::error_code>>
    {
        SK_CHECK(is_open(), "attempt to write on a closed channel");

        auto bytes_read = co_await async_fd_send(_fd.fd(), buffer, nobjs, 0);

        if (!bytes_read)
            co_return make_unexpected(bytes_read.error());

        // 0 bytes = client went away
        if (*bytes_read == 0)
            co_return make_unexpected(cio::error::end_of_file);

        co_return *bytes_read;
    }

    /*************************************************************************
     * tcpchannel::write_some()
     */

    inline auto tcpchannel::write_some(value_type const *buffer,
                                       io_size_t nobjs)
        -> expected<io_size_t, std::error_code>
    {
        return wait(async_write_some(buffer, nobjs));
    }

} // namespace sk::cio::win32::net

#endif // SK_CIO_POSIX_NET_TCPCHANNEL_HXX_INCLUDED
