/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CIO_CHANNEL_WRITE_HXX_INCLUDED
#define SK_CIO_CHANNEL_WRITE_HXX_INCLUDED

#include <sk/cio/channel/concepts.hxx>
#include <sk/cio/detail/safeint.hxx>

namespace sk::cio {

    // clang-format off

    /*************************************************************************
     *
     * Channel output.
     *
     */

    /*************************************************************************
     * write_some()
     */

    // write_some(channel, data, n)
    template<oseqchannel Channel>
    auto write_some(Channel& channel,
                    channel_value_t<Channel> const* buf, io_size_t n)
        -> expected<io_size_t, std::error_code>
    {
        return channel.write_some(buf, n);
    }

    // async_write_some(channel, data, n)
    template<oseqchannel Channel>
    auto async_write_some(Channel& channel,
                          channel_value_t<Channel> const* buf, io_size_t n)
        -> task<expected<io_size_t, std::error_code>>
    {
        co_return co_await channel.async_write_some(buf, n);
    }

    // write_some(channel, range, n)
    template<oseqchannel Channel, std::ranges::contiguous_range Range>
    auto write_some(Channel &channel, Range const &range, io_size_t n)
         -> expected<io_size_t, std::error_code>
         requires std::same_as<channel_value_t<Channel>,
                               std::ranges::range_value_t<Range>> {

        auto data = std::ranges::data(range);
        auto size = cio::detail::int_cast<io_size_t>(
                std::ranges::size(range));
        if (n < size)
            size = n;

        return write_some(channel, data, size);
    }

    // async_write_some(channel, range, n)
    template<oseqchannel Channel, std::ranges::contiguous_range Range>
    auto async_write_some(Channel &channel, Range &&range, io_size_t n)
         -> task<expected<io_size_t, std::error_code>>
         requires std::same_as<channel_value_t<Channel>,
                               std::ranges::range_value_t<Range>> {

        auto data = std::ranges::data(range);
        auto size = cio::detail::int_cast<io_size_t>(
                std::ranges::size(range));

        if (n < size)
            size = n;

        co_return co_await async_write_some(channel, data, size);
    }

    // write_some(channel, buf, n)
    template<oseqchannel Channel, sk::readable_buffer Buffer>
    auto write_some(Channel &channel, Buffer &buffer, io_size_t n)
        -> expected<io_size_t, std::error_code>
           requires std::same_as<channel_value_t<Channel>,
                                  sk::buffer_value_t<Buffer>> {

        auto ranges = buffer.get_readable_ranges();
        if (std::ranges::size(ranges) == 0u)
            return 0u;

        auto &first_range = *std::ranges::begin(ranges);
        return write_some(channel, first_range, n);
    }

    // async_write_some(channel, buf, n)
    template<oseqchannel Channel, sk::readable_buffer Buffer>
    auto async_write_some(Channel &channel, Buffer &buffer, io_size_t n)
         -> task<expected<io_size_t, std::error_code>>
         requires std::same_as<channel_value_t<Channel>,
                               sk::buffer_value_t<Buffer>> {

        auto ranges = buffer.readable_ranges();
        if (std::ranges::size(ranges) == 0u)
            co_return 0u;

        auto &first_range = *std::ranges::begin(ranges);
        co_return co_await async_write_some(channel, first_range, n);
    }

    /*************************************************************************
     * write_all()
     */

    // write_all(channel, data, n)
    template<oseqchannel Channel>
    auto write_all(Channel &channel,
                   channel_value_t<Channel> const *data,
                   io_size_t n)
        -> std::pair<io_size_t, std::error_code> {

        io_size_t bytes_written = 0;

        while (n) {
            auto ret = write_some(channel, data, n);

            if (!ret)
                return {bytes_written, ret.error()};

            bytes_written += *ret;
            n -= *ret;
            data += *ret;
        }

        return {bytes_written, sk::cio::error::no_error};
    }

    // async_write_all(channel, data, n)
    template<oseqchannel Channel>
    auto async_write_all(Channel &channel,
                         channel_value_t<Channel> const *data,
                         io_size_t n)
        -> task<std::pair<io_size_t, std::error_code>> {

        io_size_t bytes_written = 0;

        while (n) {
            auto ret = co_await async_write_some(channel, data, n);

            if (!ret)
                co_return {bytes_written, ret.error()};

            bytes_written += *ret;
            n -= *ret;
            data += *ret;
        }

        co_return {bytes_written, sk::cio::error::no_error};
    }

    // write_all(channel, range, n)
    template<oseqchannel Channel, std::ranges::contiguous_range Range>
    auto write_all(Channel &channel, Range const &range, io_size_t n)
         -> std::pair<io_size_t, std::error_code>
         requires std::same_as<
            channel_const_value_t<Channel>,
            std::add_const_t<std::ranges::range_value_t<Range>>
         > {

        auto data = std::ranges::data(range);
        auto size = cio::detail::int_cast<io_size_t>(
                std::ranges::size(range));
        if (n < size)
            size = n;

        return write_all(channel, data, size);
    }

    // async_write_all(channel, range, n)
    template<oseqchannel Channel, std::ranges::contiguous_range Range>
    auto async_write_all(Channel &channel, Range const &range, io_size_t n)
         -> task<std::pair<io_size_t, std::error_code>>
         requires std::same_as<channel_value_t<Channel>,
                               std::ranges::range_value_t<Range>> {

        auto data = std::ranges::data(range);
        auto size = cio::detail::int_cast<io_size_t>(
                std::ranges::size(range));
        if (n < size)
            size = n;

        co_return co_await async_write_all(channel, data, size);
    }


    // write_all(channel, buffer, n)
    template<oseqchannel Channel, sk::readable_buffer Buffer>
    auto write_all(Channel &channel, Buffer &buffer, io_size_t n)
        -> std::pair<io_size_t, std::error_code>
           requires std::same_as<channel_value_t<Channel>,
                                 sk::buffer_value_t<Buffer>> {

        io_size_t bytes_written = 0;

        for (auto &&range : buffer.readable_ranges()) {
            auto ret = write_all(channel, range, n - bytes_written);
            bytes_written += ret.first;

            if (ret.second)
                return {bytes_written, ret.second};
        }

        return {bytes_written, sk::cio::error::no_error};
    }

    // async_write_all(channel, buffer, n)
    template<oseqchannel Channel, sk::readable_buffer Buffer>
    auto async_write_all(Channel &channel, Buffer &buffer, io_size_t n)
        -> task<std::pair<io_size_t, std::error_code>>
           requires std::same_as<channel_value_t<Channel>,
                                 sk::buffer_value_t<Buffer>> {

        io_size_t bytes_written = 0;

        for (auto &&range : buffer.readable_ranges()) {
            auto ret = write_all(channel, range, n - bytes_written);
            bytes_written += ret.first;

            if (ret.second)
                co_return {bytes_written, ret.second};
        }

        co_return {bytes_written, sk::cio::error::no_error};
    }

     /*************************************************************************
     * write_some_at()
     */

    // write_some_at(channel, loc, data, n)
    template<odachannel Channel>
    auto write_some_at(Channel &channel,
                       io_offset_t loc,
                       channel_value_t<Channel> const *data,
                       io_size_t n)
        -> expected<io_size_t, std::error_code> {

        return channel.write_some_at(loc, data, n);
    }

    // async_write_some_at(channel, loc, data, n)
    template<odachannel Channel>
    auto async_write_some_at(Channel &channel,
                             io_offset_t loc,
                             channel_value_t<Channel> const *data,
                             io_size_t n)
        -> expected<io_size_t, std::error_code> {

        co_return co_await channel.async_write_some_at(loc, data, n);
    }

    // write_some_at(channel, loc, range, n)
    template<odachannel Channel, std::ranges::contiguous_range Range>
    auto write_some_at(Channel &channel,
                       io_offset_t loc,
                       Range const &range,
                       io_size_t n)
         -> expected<io_size_t, std::error_code>
         requires std::same_as<channel_value_t<Channel>,
                               std::ranges::range_value_t<Range>> {

        auto data = std::ranges::data(range);
        auto size = cio::detail::int_cast<io_size_t>(
                std::ranges::size(range));
        if (n < size)
            size = n;

        return write_some_at(channel, loc, data, size);
    }

    // async_write_some_at(chanel, loc, range, n)
    template<odachannel Channel, std::ranges::contiguous_range Range>
    auto async_write_some_at(Channel &channel,
                             io_offset_t loc,
                             Range const &range,
                             io_size_t n)
         -> task<expected<io_size_t, std::error_code>>
         requires std::same_as<channel_value_t<Channel>,
                               std::ranges::range_value_t<Range>> {

        auto data = std::ranges::data(range);
        auto size = cio::detail::int_cast<io_size_t>(
                std::ranges::size(range));
        if (n < size)
            size = n;

        co_return co_await async_write_some_at(channel, loc, data, size);
    }

    // write_some_at(channel, loc, buffer, n)
    template<odachannel Channel, sk::readable_buffer Buffer>
    auto write_some_at(Channel &channel,
                       io_offset_t loc,
                       Buffer &buffer,
                       io_size_t n)
        -> expected<io_size_t, std::error_code>
           requires std::same_as<channel_value_t<Channel>,
                                 sk::buffer_value_t<Buffer>> {

        auto ranges = buffer.get_readable_ranges();
        if (std::ranges::size(ranges) == 0u)
            return 0u;

        auto &first_range = *std::ranges::begin(ranges);
        return write_some_at(channel, loc, first_range, n);
    }

    // async_write_some_at(channel, loc, buffer, n)
    template<odachannel Channel, sk::writable_buffer Buffer>
    auto async_write_some_at(Channel &channel,
                             io_offset_t loc,
                             Buffer &buffer,
                             io_size_t n)
         -> task<expected<io_size_t, std::error_code>>
         requires std::same_as<channel_value_t<Channel>,
                               sk::buffer_value_t<Buffer>> {

        auto ranges = buffer.get_readable_ranges();
        if (std::ranges::size(ranges) == 0u)
            co_return 0u;

        auto &first_range = *std::ranges::begin(ranges);
        co_return co_await async_write_some_at(channel, loc, first_range, n);
    }

    // clang-format on

} // namespace sk::cio

#endif // SK_CIO_CHANNEL_READ_HXX_INCLUDED
