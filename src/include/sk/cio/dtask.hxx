/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CIO_DTASK_HXX_INCLUDED
#define SK_CIO_DTASK_HXX_INCLUDED

#include <chrono>
#include <concepts>
#include <coroutine>
#include <future>
#include <iostream>
#include <optional>
#include <thread>
#include <utility>

#include <sk/cio/reactor.hxx>

namespace sk::cio {

    struct dtask {
        struct promise_type {
            promise_type() {
                //std::cerr << "promise_type() : ctor\n";
            }
            ~promise_type() {
                //std::cerr << "promise_type() : dtor\n";
                //std::coroutine_handle<promise_type>::from_promise(*this)
                //    .destroy();
            }

            auto get_return_object() {
                return dtask(
                    std::coroutine_handle<promise_type>::from_promise(*this));
            }

            std::suspend_always initial_suspend() {
                return {};
            }

            struct final_awaiter {
                bool await_ready() noexcept {
                    return false;
                }

                void await_resume() noexcept {}
                void
                await_suspend(std::coroutine_handle<promise_type> h) noexcept {
                    // h.destroy();
                    //reactor_handle::get_global_reactor().post(
                    //    [=] { h.destroy(); });
                }
            };

            #if 0
            final_awaiter final_suspend() noexcept {
                return {};
            }
            #endif
            void final_suspend() noexcept {
                //std::cerr << "final_suspend\n";
            }
            void unhandled_exception() {
                throw;
            }

            void return_void() {
                //std::cerr << "return_void()\n";
            }
        };

        std::coroutine_handle<promise_type> coro_handle;

        dtask(std::coroutine_handle<promise_type> coro_handle_)
            : coro_handle(coro_handle_) {
            //std::cerr << "dtask : ctor\n";
        }

        dtask(dtask const &) = delete;
        dtask &operator=(dtask const &) = delete;
        dtask &operator=(dtask &&other) = delete;

        dtask(dtask &&other) noexcept
            : coro_handle(std::exchange(other.coro_handle, {})) {
            //std::cerr << "dtask : move ctor\n";
        }

        ~dtask() {
            std::cerr << "~dtask()\n";
            if (coro_handle) {
                //std::cerr << "~dtask() : will destroy the coro\n";
                coro_handle.destroy();
            } else
                //std::cerr << "~dtask() : not destroying the handle\n";
        }

        bool await_ready() {
            return false;
        }

        void await_resume() {
            //std::cerr << "dtask : await_resume()\n";
        }

        bool await_suspend(std::coroutine_handle<> h) {
            //std::cerr << "dtask : await_suspend()\n";
            std::coroutine_handle<> h_ = std::exchange(coro_handle, {});
            reactor_handle::get_global_reactor().post([=] { h_.resume(); });
            return false;
        }
    };

} // namespace sk::cio

#endif // SK_CIO_TASK_HXX_INCLUDED
