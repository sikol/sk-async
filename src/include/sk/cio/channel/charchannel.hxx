/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CIO_CHANNEL_CHARCHANNEL_HXX_INCLUDED
#define SK_CIO_CHANNEL_CHARCHANNEL_HXX_INCLUDED

#include <cstddef>

#include <sk/cio/channel/concepts.hxx>
#include <sk/cio/types.hxx>
#include <sk/cio/task.hxx>
#include <sk/cio/expected.hxx>

namespace sk::cio {

    /*************************************************************************
     *
     * charchannel: convert a byte channel into a char type.
     *
     */
    // clang-format off
    template <channel_base CharT, typename Channel>
        requires (sizeof(CharT) == sizeof(std::byte))
                 && std::same_as<typename Channel::value_type, std::byte>
    struct charchannel {
        Channel *base_channel;

        charchannel(Channel &base_channel_) : base_channel(&base_channel_) {}

        template <sk::readable_buffer Buffer>
        [[nodiscard]] 
        auto async_write_some(io_size_t n, Buffer &buffer)
            -> task<expected<io_size_t, std::error_code>> 
            requires std::same_as<sk::buffer_value_t<Buffer>, std::byte> 
        {
            return base_channel->async_write_some(n, buffer);
        }

        template <sk::readable_buffer Buffer>
        [[nodiscard]]
        auto write_some(io_size_t n, Buffer& buffer)
            -> expected<io_size_t, std::error_code> 
            requires std::same_as<sk::buffer_value_t<Buffer>, std::byte> 
        {
            return base_channel->write_some(n, buffer);
        }

        template <sk::writable_buffer Buffer>
        [[nodiscard]]
        auto async_read_some(io_size_t n, Buffer& buffer)
            -> task<expected<io_size_t, std::error_code>> 
            requires std::same_as<sk::buffer_value_t<Buffer>, std::byte> 
        {
            return base_channel->async_read_home(n, buffer);
        }

        template <sk::writable_buffer Buffer>
        [[nodiscard]] 
        auto read_some(io_size_t n, Buffer& buffer)
            -> expected<io_size_t, std::error_code> 
            requires std::same_as<sk::buffer_value_t<Buffer>, std::byte> 
        {
            return base_channel->read_some(n, buffer);
        }
    };
    // clang-format on

} // namespace sk::cio

#endif // SK_CIO_CHANNEL_CHARCHANNEL_HXX_INCLUDED
