/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CIO_WIN32_SPAWN_HXX_INCLUDED
#define SK_CIO_WIN32_SPAWN_HXX_INCLUDED

#include <sk/cio/reactor.hxx>

namespace sk::cio::win32 {

    /*
     * Run a callable on another thread in a way that can be awaited.
     */

    template <typename Callable>
    struct co_spawn_awaiter {
        using result_type = std::invoke_result_t<Callable>;
        Callable c;
        iocp_coro_state overlapped;
        std::future<result_type> future;

        co_spawn_awaiter(Callable &&c_) : c(std::move(c_)) {}

        bool await_ready() {
            return false;
        }

        bool await_suspend(std::coroutine_handle<> coro_handle_) {
            std::lock_guard lock(overlapped.mutex);
            overlapped.coro_handle = coro_handle_;

            future = std::async(std::launch::async, [&]() -> result_type {
                auto ret = c();
                ::PostQueuedCompletionStatus(
                    reactor_handle::get_global_reactor()
                        .completion_port.handle_value,
                    0, 0, &overlapped);
                return ret;
            });

            return true;
        }

        result_type await_resume() {
            return std::move(future.get());
        }
    };

    template <typename Callable>
    auto spawn(Callable &&c) -> task<std::invoke_result_t<Callable>> {
        co_return co_await co_spawn_awaiter(std::move(c));
    }

} // namespace sk::cio::win32

#endif // SK_CIO_WIN32_SPAWN_HXX_INCLUDED
