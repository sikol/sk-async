/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CIO_WIN32_IOCP_REACTOR_HXX_INCLUDED
#define SK_CIO_WIN32_IOCP_REACTOR_HXX_INCLUDED

#include <coroutine>
#include <iostream>
#include <system_error>
#include <thread>

#include <sk/cio/concepts.hxx>
#include <sk/cio/task.hxx>
#include <sk/cio/win32/handle.hxx>
#include <sk/cio/win32/error.hxx>
#include <sk/cio/win32/windows.hxx>

namespace sk::cio::win32 {
#if 0
    struct get_coro_handle {
        bool await_ready() const noexcept {
            return false;
        }

        bool await_suspend(std::coroutine_handle<> h_) noexcept {
            h = h_;
            return false;
        }

        std::coroutine_handle<> await_resume() const noexcept {
            return h;
        }

        std::coroutine_handle<> h;
    };
#endif

    struct iocp_awaitable : OVERLAPPED {
        BOOL success;
        DWORD error;
        DWORD bytes_transferred;
        std::coroutine_handle<> coro_handle;
        std::mutex mutex;
    };

    struct co_ReadFile_awaiter {
        HANDLE hFile;
        LPVOID lpBuffer;
        DWORD nNumberOfBytesToRead;
        LPDWORD lpNumberOfBytesRead;
        iocp_awaitable *overlapped;

        bool did_suspend = false;
        //std::mutex mutex;

        bool await_ready() {
            return false;
        }

        bool await_suspend(std::coroutine_handle<> coro_handle_) {
            std::lock_guard lock(overlapped->mutex);
            overlapped->coro_handle = coro_handle_;

            overlapped->success =
                ::ReadFile(hFile, lpBuffer, nNumberOfBytesToRead,
                           lpNumberOfBytesRead, overlapped);

            if (!overlapped->success && (GetLastError() == ERROR_IO_PENDING))
                return did_suspend = true;

            return did_suspend = false;
        }

        std::error_code await_resume() {
            //std::lock_guard lock(overlapped->mutex);
            DWORD error;

            if (did_suspend) {
                error = overlapped->error;
                *lpNumberOfBytesRead = overlapped->bytes_transferred;
            } else {
                error = GetLastError();
            }

            return win32::make_win32_error(error);
        }
    };

/*
 * Run a callable on another thread in a way that can be awaited.
 */
#if 0
    template <typename... Args, std::invocable<Args...> Invocable>
    task<typename std::invoke_result<Invocable, Args...>::type>
    spawn(Invocable &&i, Args &&...args) {

    }
#endif

    task<HANDLE> AsyncCreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess,
                                  DWORD dwShareMode,
                                  LPSECURITY_ATTRIBUTES lpSecurityAttributes,
                                  DWORD dwCreationDisposition,
                                  DWORD dwFlagsAndAttributes,
                                  HANDLE hTemplateFile);

    task<HANDLE> AsyncCreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess,
                                  DWORD dwShareMode,
                                  LPSECURITY_ATTRIBUTES lpSecurityAttributes,
                                  DWORD dwCreationDisposition,
                                  DWORD dwFlagsAndAttributes,
                                  HANDLE hTemplateFile);

    task<std::error_code> AsyncReadFile(HANDLE hFile, LPVOID lpBuffer,
                                        DWORD nNumberOfBytesToRead,
                                        LPDWORD lpNumberOfBytesRead,
                                        DWORD64 Offset);

    struct iocp_reactor {

        iocp_reactor();

        // Not copyable.
        iocp_reactor(iocp_reactor const &) = delete;
        iocp_reactor &operator=(iocp_reactor const &) = delete;

        // Movable.
        iocp_reactor(iocp_reactor &&) noexcept = default;
        iocp_reactor &operator=(iocp_reactor &&) noexcept = default;

        unique_handle completion_port{nullptr};

        // Associate a new handle with our i/o port.
        auto associate_handle(HANDLE) -> void;

        // Start this reactor.
        auto start() -> void;

        // Stop this reactor.
        auto stop() -> void;

    private:
        void reactor_thread_fn(void);
        std::jthread reactor_thread;
    };

    static_assert(reactor<iocp_reactor>);

}; // namespace sk::cio::win32

#endif // SK_CIO_WIN32_IOCP_REACTOR_HXX_INCLUDED
