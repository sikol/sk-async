/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_ASYNC_WIN32_ERROR_HXX_INCLUDED
#define SK_ASYNC_WIN32_ERROR_HXX_INCLUDED

#include <system_error>

#include <sk/async/win32/windows.hxx>
#include <sk/async/error.hxx>

/*
 * Error handling support for Win32.
 */

namespace sk::async::win32 {

    /*
     * Win32 error category - this corresponds to FORMAT_MESSAGE_FROM_SYSTEM.
     */

    enum struct error : DWORD {
        success = ERROR_SUCCESS, // 0
    };

} // namespace sk::async::detail::win32

namespace std {
    template <>
    struct is_error_code_enum<sk::async::win32::error> : true_type {};
}; // namespace std

namespace sk::async::win32 {

    namespace detail {

        struct win32_errc_category : std::error_category {
            auto name() const noexcept -> char const * final;
            auto message(int c) const -> std::string final;
        };

    } // namespace detail

    auto win32_errc_category() -> detail::win32_errc_category const &;
    std::error_code make_error_code(error e);

    // Construct a Win32 error from an error code.
    std::error_code make_win32_error(DWORD e);
    std::error_code make_win32_error(LSTATUS e);

    // Return a Win32 error representing GetLastError()
    std::error_code get_last_error();

} // namespace sk::async::detail::win32

#endif // SK_ASYNC_WIN32_ERROR_HXX_INCLUDED
