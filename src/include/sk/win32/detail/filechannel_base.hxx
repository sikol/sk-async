/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_WIN32_DETAIL_FILECHANNEL_BASE_HXX_INCLUDED
#define SK_WIN32_DETAIL_FILECHANNEL_BASE_HXX_INCLUDED

#include <filesystem>
#include <stop_token>
#include <system_error>

#include <sk/async_invoke.hxx>
#include <sk/channel/error.hxx>
#include <sk/channel/filechannel.hxx>
#include <sk/channel/types.hxx>
#include <sk/co_detach.hxx>
#include <sk/detail/safeint.hxx>
#include <sk/reactor.hxx>
#include <sk/task.hxx>
#include <sk/wait.hxx>
#include <sk/win32/async_api.hxx>
#include <sk/win32/error.hxx>
#include <sk/win32/handle.hxx>

namespace sk::win32::detail {

    /*************************************************************************
     *
     * filechannel_base: base class for file channels.
     *
     */
    class filechannel_base {
    public:
        filechannel_base(filechannel_base const &) = delete;
        auto operator=(filechannel_base const &) -> filechannel_base & = delete;

    protected:
        using value_type = std::byte;
        using native_handle_type = win32::unique_handle;

        filechannel_base() noexcept = default;
        ~filechannel_base();

        filechannel_base(filechannel_base &&) noexcept = default;
        auto operator=(filechannel_base &&) noexcept
            -> filechannel_base & = default;

    public:
        /*
         * Test if this channel has been opened.
         */
        [[nodiscard]] auto is_open() const noexcept -> bool;

        [[nodiscard]] auto async_close() noexcept
            -> task<expected<void, std::error_code>>;

        [[nodiscard]] auto close() noexcept -> expected<void, std::error_code>;

    protected:
        [[nodiscard]] auto async_da_open(std::filesystem::path const &path,
                                         fileflag::flagset flags) noexcept
            -> task<expected<void, std::error_code>>;

        [[nodiscard]] auto da_open(std::filesystem::path const &path,
                                   fileflag::flagset flags) noexcept
            -> expected<void, std::error_code>;

        [[nodiscard]] auto _make_flags(fileflag::flagset flags,
                                       DWORD &dwDesiredAccess,
                                       DWORD &dwCreationDisposition,
                                       DWORD &dwShareMode) noexcept -> bool;

        /*
         * Read data.
         */
        template <std::size_t extent>
        [[nodiscard]] auto
        async_read_some_at(io_offset_t loc,
                           std::span<value_type, extent> buf,
                           std::stop_token token = {}) noexcept
            -> task<expected<io_size_t, std::error_code>>;

        template <std::size_t extent>
        [[nodiscard]] auto
        read_some_at(io_offset_t loc,
                     std::span<value_type, extent> buf) noexcept
            -> expected<io_size_t, std::error_code>;

        /*
         * Write data.
         */
        template <std::size_t extent>
        [[nodiscard]] auto
        async_write_some_at(io_offset_t loc,
                            std::span<value_type const, extent> buf,
                            std::stop_token token = {}) noexcept
            -> task<expected<io_size_t, std::error_code>>;

        template <std::size_t extent>
        [[nodiscard]] auto
        write_some_at(io_offset_t loc,
                      std::span<value_type const, extent> buf) noexcept
            -> expected<io_size_t, std::error_code>;

        iocb_handle cb;
    };

    /*************************************************************************
     * filechannel_base::_make_flags()
     */
    inline auto filechannel_base::_make_flags(fileflag::flagset flags,
                                              DWORD &dwDesiredAccess,
                                              DWORD &dwCreationDisposition,
                                              DWORD &dwShareMode) noexcept
        -> bool
    {
        // Must specify either read or write.
        if (!any_set(flags, fileflags::read | fileflags::write))
            return false;

        // Read access only
        if (is_set(flags, fileflags::read) &&
            !is_set(flags, fileflags::write)) {
            // These flags are not valid for reading.
            if (any_set(flags,
                        fileflags::trunc | fileflags::append |
                            fileflags::create_new))
                return false;

            dwDesiredAccess = GENERIC_READ;
            dwCreationDisposition = OPEN_EXISTING;
            dwShareMode = FILE_SHARE_READ;
            return true;
        }

        // Write access or read-write access
        if (is_set(flags, fileflags::write)) {
            // Must specify either create_new or open_existing (or both).
            if (!any_set(flags,
                         fileflags::create_new | fileflags::open_existing))
                return false;

            // Per
            // https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilew
            // When opening a file for write, specify both GENERIC_READ and
            // GENERIC_WRITE even if we don't intend to read from the file.
            dwDesiredAccess |= GENERIC_READ | GENERIC_WRITE;

            // if (flags & fileflags::read)
            //    dwDesiredAccess |= GENERIC_READ;

            // Must create a new file.
            if (is_set(flags, fileflags::create_new) &&
                !is_set(flags, fileflags::open_existing))
                dwCreationDisposition = CREATE_NEW;
            // Can create a new file or open an existing one.
            else if (is_set(flags, fileflags::create_new) &&
                     is_set(flags, fileflags::open_existing)) {
                if (is_set(flags, fileflags::trunc))
                    dwCreationDisposition = CREATE_ALWAYS;
                else
                    dwCreationDisposition = OPEN_ALWAYS;
                // Can only open an existing file.
            } else if (!is_set(flags, fileflags::create_new) &&
                       is_set(flags, fileflags::open_existing)) {
                if (is_set(flags, fileflags::trunc))
                    dwCreationDisposition = TRUNCATE_EXISTING;
                else
                    dwCreationDisposition = OPEN_EXISTING;
            }

            return true;
        }

        return false;
    }

    /*************************************************************************
     * filechannel_base::~filechannel_base()
     */
    inline filechannel_base::~filechannel_base()
    {
        if (is_open()) {
            SK_TRACE("filechannel_base[{}]: destructing but iocb is still open",
                     static_cast<void *>(this));

            auto reactor = weak_reactor_handle::get();
            auto *xer = reactor->get_system_executor();
            wait(co_detach(
                [cb = this->cb]() mutable -> task<void> {
                    co_await iocore::async_iocb_close(cb);
                }(),
                xer));
        }
    }

    /*************************************************************************
     * filechannel_base::async_open()
     */
    inline auto
    filechannel_base::async_da_open(std::filesystem::path const &path,
                                    fileflag::flagset flags) noexcept
        -> task<expected<void, std::error_code>>
    {
        if (is_open())
            co_return make_unexpected(sk::error::channel_already_open);

        DWORD dwDesiredAccess = 0;
        DWORD dwShareMode = 0;
        DWORD dwCreationDisposition = 0;

        SK_TRACE("filechannel_base::async_da_open[{}]: path={}, flags={:08b}",
                 static_cast<void *>(this),
                 path.string(),
                 flags.value);

        if (!_make_flags(
                flags, dwDesiredAccess, dwCreationDisposition, dwShareMode))
            co_return make_unexpected(sk::error::filechannel_invalid_flags);

        auto const &wpath(path.native());

        auto handle =
            co_await async_invoke([=]() -> expected<HANDLE, std::error_code> {
                auto hdl =
                    ::CreateFileW(wpath.c_str(),
                                  dwDesiredAccess,
                                  dwShareMode,
                                  nullptr,
                                  dwCreationDisposition,
                                  FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED,
                                  nullptr);

                SK_TRACE("filechannel_base::async_da_open[{}]: CreateFileW() "
                         "returns {}, GetLastError={}",
                         static_cast<void *>(this),
                         hdl,
                         ::GetLastError());

                if (hdl == SK_INVALID_HANDLE_VALUE)
                    return make_unexpected(win32::get_last_error());

                return hdl;
            });

        if (!handle)
            co_return make_unexpected(handle.error());

        auto ioh = iocore::create_iocb(*handle);
        if (!ioh)
            co_return make_unexpected(ioh.error());
        cb = std::move(*ioh);

        SK_TRACE(
            "filechannel_base::async_da_open[{}]: handle is {}, iocb at {}",
            static_cast<void *>(this),
            cb->hdl,
            static_cast<void *>(cb.get()));

        co_return {};
    }

    /*************************************************************************
     * filechannel_base::da_open()
     */
    inline auto filechannel_base::da_open(std::filesystem::path const &path,
                                          fileflag::flagset flags) noexcept
        -> expected<void, std::error_code>
    {
        return wait(async_da_open(path, flags));
    }

    /*************************************************************************
     * filechannel_base::is_open()
     */
    inline auto filechannel_base::is_open() const noexcept -> bool
    {

        return static_cast<bool>(cb);
    }

    /*************************************************************************
     * filechannel_base::close()
     */
    inline auto filechannel_base::close() noexcept
        -> expected<void, std::error_code>
    {
        return wait(async_close());
    }

    /*************************************************************************
     * filechannel_base::async_close()
     */
    inline auto filechannel_base::async_close() noexcept
        -> task<expected<void, std::error_code>>
    {
        SK_CHECK(is_open(), "attempting to close a stream which is not open");

        unique_handle handle(cb->hdl);

        // Destroy the iocb.
        co_await iocore::async_iocb_close(cb);

        cb.reset();

        // Close the handle.
        auto ret = handle.close();
        if (!ret)
            co_return make_unexpected(ret.error());

        co_return {};
    }

    /*************************************************************************
     * filechannel_base::_async_read_some_at()
     */
    template <std::size_t extent>
    auto filechannel_base::async_read_some_at(io_offset_t loc,
                                              std::span<value_type, extent> buf,
                                              std::stop_token token) noexcept
        -> task<expected<io_size_t, std::error_code>>
    {
        SK_CHECK(is_open(), "attempt to read on a closed channel");

        auto bufsize = sk::detail::truncate<DWORD>(buf.size());
        auto nbytes = co_await iocore::async_iocb_invoke_overlapped(
            cb,
            std::move(token),
            [&](HANDLE hdl, iocore::iocb::io *io) -> DWORD {
                io->Offset = static_cast<DWORD>(loc & 0xFFFFFFFFUL);
                io->OffsetHigh = static_cast<DWORD>(loc >> 32);

                auto ret = ::ReadFile(
                    hdl, buf.data(), bufsize, &io->bytes_transferred, io);

                if (ret == TRUE)
                    return NO_ERROR;

                return ::GetLastError();
            });

        if (!nbytes)
            co_return make_unexpected(nbytes.error());

        co_return *nbytes;
    }

    /*************************************************************************
     * filechannel_base::read_some_at()
     */
    template <std::size_t extent>
    auto
    filechannel_base::read_some_at(io_offset_t loc,
                                   std::span<value_type, extent> buf) noexcept
        -> expected<io_size_t, std::error_code>
    {
        return wait(async_read_some_at(loc, buf));
    }

    /*************************************************************************
     * filechannel_base::async_write_some_at()
     */
    template <std::size_t extent>
    auto filechannel_base::async_write_some_at(
        io_offset_t loc,
        std::span<value_type const, extent> buf,
        std::stop_token token) noexcept
        -> task<expected<io_size_t, std::error_code>>
    {
        SK_CHECK(is_open(), "attempt to write on a closed channel");

        auto bufsize = sk::detail::truncate<DWORD>(buf.size());
        auto nbytes = co_await iocore::async_iocb_invoke_overlapped(
            cb,
            std::move(token),
            [&](HANDLE hdl, iocore::iocb::io *io) -> DWORD {
                io->Offset = static_cast<DWORD>(loc & 0xFFFFFFFFUL);
                io->OffsetHigh = static_cast<DWORD>(loc >> 32);

                auto ret = ::WriteFile(
                    hdl, buf.data(), bufsize, &io->bytes_transferred, io);

                if (ret == TRUE)
                    return NO_ERROR;

                return ::GetLastError();
            });

        if (nbytes)
            co_return make_unexpected(nbytes.error());

        co_return nbytes;
    }

    /*************************************************************************
     * filechannel_base::write_some_at()
     */

    template <std::size_t extent>
    auto filechannel_base::write_some_at(
        io_offset_t loc, std::span<value_type const, extent> buf) noexcept
        -> expected<io_size_t, std::error_code>
    {
        return wait(async_write_some_at(loc, buf));
    }

    /*************************************************************************
     *
     * seqfilechannel_base: base class for sequential access file channels.
     *
     */
    class seqfilechannel_base : protected filechannel_base {
    public:
        using filechannel_base::value_type;

        seqfilechannel_base(seqfilechannel_base const &) = delete;
        auto operator=(seqfilechannel_base const &)
            -> seqfilechannel_base & = delete;

    protected:
        seqfilechannel_base() noexcept = default;
        ~seqfilechannel_base() = default;

        seqfilechannel_base(seqfilechannel_base &&) noexcept = default;
        auto operator=(seqfilechannel_base &&) noexcept
            -> seqfilechannel_base & = default;

        [[nodiscard]] auto
        async_seq_open(std::filesystem::path const &path,
                       fileflag::flagset flags = fileflags::none) noexcept
            -> task<expected<void, std::error_code>>
        {
            if (is_set(flags, fileflags::append))
                _write_position = at_end;
            else
                _write_position = 0;

            _read_position = 0;

            co_return co_await async_da_open(path, flags);
        }

        [[nodiscard]] auto
        seq_open(std::filesystem::path const &path,
                 fileflag::flagset flags = fileflags::none) noexcept
            -> expected<void, std::error_code>
        {
            if (is_set(flags, fileflags::append))
                _write_position = at_end;
            else
                _write_position = 0;

            _read_position = 0;

            return da_open(path, flags);
        }

        /*
         * Read data.
         */
        template <std::size_t extent>
        [[nodiscard]] auto async_read_some(std::span<value_type, extent> buf)
            -> task<expected<io_size_t, std::error_code>>
        {
            auto ret = co_await async_read_some_at(_read_position, buf);
            if (ret)
                _read_position += *ret;
            co_return ret;
        }

        template <std::size_t extent>
        [[nodiscard]] auto read_some(std::span<value_type, extent> buf)
            -> expected<io_size_t, std::error_code>
        {
            auto ret = read_some_at(_read_position, buf);
            if (ret)
                _read_position += *ret;
            return ret;
        }

        /*
         * Write data.
         */
        template <std::size_t extent>
        [[nodiscard]] auto
        async_write_some(std::span<value_type const, extent> buf) noexcept
            -> task<expected<io_size_t, std::error_code>>
        {
            auto ret = co_await async_write_some_at(_write_position, buf);
            if (_write_position != at_end && ret)
                _write_position += *ret;
            co_return ret;
        }

        template <std::size_t extent>
        [[nodiscard]] auto
        write_some(std::span<value_type const, extent> buf) noexcept
            -> expected<io_size_t, std::error_code>
        {
            auto ret = write_some_at(_write_position, buf);
            if (_write_position != at_end && ret)
                _write_position += *ret;
            return ret;
        }

    private:
        io_offset_t _read_position{};
        io_offset_t _write_position{};
    };

    /*************************************************************************
     *
     * dafilechannel_base: base class for direct access file channels.
     *
     * In Win32, filechannel_base always uses direct access, so this doesn't
     * do anything.
     */
    class dafilechannel_base : protected filechannel_base {
    };

} // namespace sk::win32::detail

#endif // SK_WIN32_DETAIL_FILECHANNEL_BASE_HXX_INCLUDED
