/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_WIN32_DETAIL_NET_STREAMSOCKETSERVER_HXX_INCLUDED
#define SK_WIN32_DETAIL_NET_STREAMSOCKETSERVER_HXX_INCLUDED

#include <cstddef>
#include <system_error>

#include <sk/expected.hxx>
#include <sk/net/address.hxx>
#include <sk/task.hxx>
#include <sk/win32/handle.hxx>

namespace sk::win32::detail {

    template <typename server_type,
              seqchannel channel_type,
              int type,
              int protocol>
    class streamsocketserver {
        unique_socket _native_handle;

        // On Windows, we need to create a new socket to accept into, which
        // means we need to know the address family we're accepting for.
        int _address_family{AF_UNSPEC};

    protected:
        streamsocketserver(unique_socket &&, int address_family);
        streamsocketserver(streamsocketserver &&) noexcept = default;
        auto operator=(streamsocketserver &&) noexcept
            -> streamsocketserver & = default;
        ~streamsocketserver() = default;

        [[nodiscard]] static auto
        _listen(int af, sockaddr const *addr, socklen_t)
            -> expected<server_type, std::error_code>;

    public:
        using value_type = std::byte;
        using native_handle_type = unique_socket;

        streamsocketserver(streamsocketserver const &) = delete;
        auto operator=(streamsocketserver const &)
            -> streamsocketserver & = delete;

        [[nodiscard]] auto is_open() const -> bool;

        [[nodiscard]] auto async_accept()
            -> task<expected<channel_type, std::error_code>>;

        [[nodiscard]] auto accept() -> expected<channel_type, std::error_code>;

        [[nodiscard]] auto async_close()
            -> task<expected<void, std::error_code>>;

        [[nodiscard]] auto close() -> expected<void, std::error_code>;
    };

    /*************************************************************************
     * streamsocketserver::streamsocketserver()
     */

    template <typename server_type,
              seqchannel channel_type,
              int type,
              int protocol>
    streamsocketserver<server_type, channel_type, type, protocol>::
        streamsocketserver(unique_socket &&sock, int address_family)
        : _native_handle(std::move(sock)), _address_family(address_family)
    {
    }

    /*************************************************************************
     * streamsocketserver::is_open()
     */

    template <typename server_type,
              seqchannel channel_type,
              int type,
              int protocol>
    auto
    streamsocketserver<server_type, channel_type, type, protocol>::is_open()
        const -> bool
    {
        return _native_handle;
    }

    /*************************************************************************
     * streamsocketserver::bind()
     */

    template <typename server_type,
              seqchannel channel_type,
              int type,
              int protocol>
    auto streamsocketserver<server_type, channel_type, type, protocol>::_listen(
        int af, sockaddr const *addr, socklen_t addrlen)
        -> expected<server_type, std::error_code>
    {
        SOCKET listener;
        listener = ::socket(af, type, protocol);

        if (listener == INVALID_SOCKET)
            return make_unexpected(win32::get_last_winsock_error());

        unique_socket listener_(listener);

        int ret;

        // Setting SO_REUSEADDR on an AF_UNIX socket is pointless, but on
        // Windows it returns an error.
#ifdef SK_CIO_PLATFORM_HAS_AF_UNIX
        if (af != AF_UNIX) {
#endif
            DWORD one = 1;
            ret = ::setsockopt(listener,
                               SOL_SOCKET,
                               SO_REUSEADDR,
                               reinterpret_cast<char const *>(&one),
                               sizeof(one));
            if (ret)
                return make_unexpected(win32::get_last_winsock_error());
#ifdef SK_CIO_PLATFORM_HAS_AF_UNIX
        }
#endif

        ret = ::bind(listener, addr, addrlen);
        if (ret)
            return make_unexpected(win32::get_last_winsock_error());

        ret = ::listen(listener, SOMAXCONN);
        if (ret)
            return make_unexpected(win32::get_last_winsock_error());

        auto reactor = get_weak_reactor_handle();
        auto aret = reactor->associate_handle(handle_cast<HANDLE>(listener));

        if (!aret)
            return make_unexpected(aret.error());

        return server_type{std::move(listener_), af};
    }

    /*************************************************************************
     * streamsocketserver::close()
     */
    template <typename server_type,
              seqchannel channel_type,
              int type,
              int protocol>
    auto streamsocketserver<server_type, channel_type, type, protocol>::close()
        -> expected<void, std::error_code>
    {
        if (!is_open())
            return make_unexpected(sk::error::channel_not_open);

        auto err = _native_handle.close();
        if (err)
            return make_unexpected(err);
        return {};
    }

    /*************************************************************************
     * streamsocketserver::async_close()
     */
    template <typename server_type,
              seqchannel channel_type,
              int type,
              int protocol>
    auto
    streamsocketserver<server_type, channel_type, type, protocol>::async_close()
        -> task<expected<void, std::error_code>>
    {
        auto err =
            co_await async_invoke([&] { return _native_handle.close(); });

        if (err)
            co_return make_unexpected(err);

        co_return {};
    }

    /*************************************************************************
     * streamsocketserver::async_accept()
     */
    template <typename server_type,
              seqchannel channel_type,
              int type,
              int protocol>
    auto streamsocketserver<server_type, channel_type, type, protocol>::
        async_accept() -> task<expected<channel_type, std::error_code>>
    {
        auto client_socket = INVALID_SOCKET;
        client_socket = ::socket(_address_family, type, protocol);

        if (client_socket == INVALID_SOCKET)
            co_return make_unexpected(win32::get_last_winsock_error());

        unique_socket client_socket_(client_socket);

        // This has to be provided even though we don't use it.
        std::array<char, (16 + sizeof(sockaddr_storage)) * 2> junk{};

        auto ret = co_await win32::AsyncAcceptEx(_native_handle.native_socket(),
                                                 client_socket,
                                                 junk.data(),
                                                 0,
                                                 sizeof(sockaddr_storage) + 16,
                                                 sizeof(sockaddr_storage) + 16,
                                                 nullptr);

        if (!ret)
            co_return make_unexpected(ret.error());

        auto reactor = get_weak_reactor_handle();
        auto aret =
            reactor->associate_handle(handle_cast<HANDLE>(client_socket));

        if (!aret)
            co_return make_unexpected(aret.error());

        co_return channel_type{std::move(client_socket_)};
    }

    /*************************************************************************
     * streamsocketserver::async_accept()
     */
    template <typename server_type,
              seqchannel channel_type,
              int type,
              int protocol>
    auto streamsocketserver<server_type, channel_type, type, protocol>::accept()
        -> expected<channel_type, std::error_code>
    {
        auto client_socket = INVALID_SOCKET;
        client_socket = ::socket(_address_family, type, protocol);

        if (client_socket == INVALID_SOCKET)
            return make_unexpected(win32::get_last_winsock_error());

        unique_socket client_socket_(client_socket);

        // This has to be provided even though we don't use it.
        std::array<char, (16 + sizeof(sockaddr_storage)) * 2> junk{};

        auto ret = ::accept(_native_handle.native_socket(), nullptr, 0);

        if (ret == INVALID_SOCKET)
            return make_unexpected(get_last_winsock_error());

        auto reactor = get_weak_reactor_handle();
        auto aret =
            reactor->associate_handle(handle_cast<HANDLE>(client_socket));

        if (!aret)
            return make_unexpected(aret.error());

        return channel_type{std::move(client_socket_)};
    }

} // namespace sk::win32::detail

#endif // SK_WIN32_DETAIL_NET_STREAMSOCKETSERVER_HXX_INCLUDED
