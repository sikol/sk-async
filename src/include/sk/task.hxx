/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CIO_TASK_HXX_INCLUDED
#define SK_CIO_TASK_HXX_INCLUDED

#include <chrono>
#include <concepts>
#include <future>
#include <iostream>
#include <optional>
#include <thread>
#include <utility>

#include <sk/detail/coroutine.hxx>

namespace sk {

    template <typename P>
    struct task_final_awaiter {
        bool await_ready() noexcept
        {
            return false;
        }

        void await_resume() noexcept {}

#ifdef SK_HAS_STD_COROUTINES
        coroutine_handle<> await_suspend(coroutine_handle<P> h) noexcept
        {
            auto &previous = h.promise().previous;
            if (previous)
                return previous;

            return std::noop_coroutine();
        }
#else
        void await_suspend(coroutine_handle<P> h) noexcept
        {
            auto &promise = h.promise();

            if (!promise.previous)
                return;

            if (promise.ready.exchange(true, std::memory_order_acq_rel))
                promise.previous.resume();
        }
#endif
    };

    template <typename T>
    struct task_promise {
#ifndef SK_HAS_CPP20_COROUTINES
        std::atomic<bool> ready = false;
#endif

        auto get_return_object()
        {
            return coroutine_handle<task_promise<T>>::from_promise(*this);
        }

        suspend_always initial_suspend()
        {
            return {};
        }

        task_final_awaiter<task_promise<T>> final_suspend() noexcept
        {
            return {};
        }

        void unhandled_exception()
        {
            throw;
        }

        void return_value(T const &value) noexcept(
            std::is_nothrow_copy_constructible_v<T>)
        {
            result = value;
        }

        void return_value(T &&value) noexcept(
            std::is_nothrow_move_constructible_v<T>)
        {
            result = std::move(value);
        }

        T result{};
        coroutine_handle<> previous;
    };

    template <>
    struct task_promise<void> {
#ifndef SK_HAS_STD_COROUTINES
        std::atomic<bool> ready = false;
#endif

        auto get_return_object()
        {
            return coroutine_handle<task_promise<void>>::from_promise(*this);
        }

        suspend_always initial_suspend()
        {
            return {};
        }

        task_final_awaiter<task_promise<void>> final_suspend() noexcept
        {
            return {};
        }

        void unhandled_exception()
        {
            throw;
        }

        void return_void() noexcept {}

        coroutine_handle<> previous;
    };

    template <typename T>
    struct task {
        using promise_type = task_promise<T>;
        coroutine_handle<promise_type> coro_handle;

        task(coroutine_handle<promise_type> coro_handle_)
            : coro_handle(coro_handle_)
        {
        }

        task(task const &) = delete;
        task &operator=(task const &) = delete;
        task &operator=(task &&other) = delete;

        task(task &&other) noexcept
            : coro_handle(std::exchange(other.coro_handle, {}))
        {
        }

        ~task()
        {
            // if (coro_handle)
            //    coro_handle.destroy();
        }

        bool await_ready()
        {
            return false;
        }

        T await_resume()
        {
            return std::move(coro_handle.promise().result);
        }

#ifdef SK_HAS_STD_COROUTINES
        auto await_suspend(coroutine_handle<> h)
        {
            coro_handle.promise().previous = h;
            return coro_handle;
        }
#else
        bool await_suspend(coroutine_handle<> h)
        {
            auto &promise = coro_handle.promise();
            promise.previous = h;
            coro_handle.resume();
            return !promise.ready.exchange(true, std::memory_order_acq_rel);
        }
#endif

        void start()
        {
            coro_handle.resume();
        }
    };

    template <>
    struct task<void> {
        using promise_type = task_promise<void>;
        coroutine_handle<promise_type> coro_handle;

        task(coroutine_handle<promise_type> coro_handle_)
            : coro_handle(coro_handle_)
        {
        }

        task(task const &) = delete;
        task &operator=(task const &) = delete;
        task &operator=(task &&other) = delete;

        task(task &&other) noexcept
            : coro_handle(std::exchange(other.coro_handle, {}))
        {
        }

        ~task()
        {
            // if (coro_handle)
            //    coro_handle.destroy();
        }

        bool await_ready()
        {
            return false;
        }

        void await_resume() {}

#ifdef SK_HAS_STD_COROUTINES
        auto await_suspend(coroutine_handle<> h)
        {
            coro_handle.promise().previous = h;
            return coro_handle;
        }
#else
        bool await_suspend(coroutine_handle<> h)
        {
            auto &promise = coro_handle.promise();
            promise.previous = h;
            coro_handle.resume();
            return !promise.ready.exchange(true, std::memory_order_acq_rel);
        }
#endif

        void start()
        {
            coro_handle.resume();
        }
    };

} // namespace sk

#endif // SK_CIO_TASK_HXX_INCLUDED
