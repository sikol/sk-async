/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <sk/cio/net/address.hxx>
#include <sk/cio/spawn.hxx>
#include <sk/cio/win32/windows.hxx>

#ifdef _WIN32
#    include <sk/cio/win32/error.hxx>
#endif

#ifndef NI_MAXHOST
#    define NI_MAXHOST 1025
#endif

#ifndef NI_MAXSERV
#    define NI_MAXSERV 32
#endif

namespace sk::cio::net {
    namespace detail {

        auto resolver_errc_category::name() const noexcept -> char const * {
            return "resolver";
        }

        auto resolver_errc_category::message(int c) const -> std::string {
            return gai_strerror(c);
        }

    } // namespace detail

    auto resolver_errc_category() -> detail::resolver_errc_category const & {
        static detail::resolver_errc_category c;
        return c;
    }

    auto make_error_code(resolver_error e) -> std::error_code {
        return {static_cast<int>(e), resolver_errc_category()};
    }

    /*************************************************************************
     * make_address()
     */
    auto make_address(std::string const &hostname, std::string const &service)
        -> expected<address, std::error_code> {

        addrinfo hints;
        addrinfo *gai_result;
        std::memset(&hints, 0, sizeof(hints));
        hints.ai_flags = AI_NUMERICHOST;

        auto ret = ::getaddrinfo(hostname.c_str(),
                                 service.empty() ? nullptr : service.c_str(),
                                 &hints, &gai_result);

        if (ret)
            return make_unexpected(
                make_error_code(static_cast<resolver_error>(ret)));

        auto addr = address(gai_result->ai_addr,
                            // On Windows, ai_addrlen is a size_t.
                            static_cast<socklen_t>(gai_result->ai_addrlen));

        freeaddrinfo(gai_result);
        return addr;
    }

    /*************************************************************************
     * async_resolve()
     */
    auto async_resolve_address(std::string hostname, std::string port)
        -> task<expected<std::vector<address>, std::error_code>> {

        addrinfo hints;
        addrinfo *gai_result;
        std::memset(&hints, 0, sizeof(hints));

        auto ret = co_await spawn([&] {
            return ::getaddrinfo(hostname.c_str(),
                                 port.empty() ? nullptr : port.c_str(), &hints,
                                 &gai_result);
        });

        if (ret)
            co_return make_unexpected(
                make_error_code(static_cast<resolver_error>(ret)));

        std::vector<address> addresses;
        for (auto p = gai_result; p; p = p->ai_next) {
            addresses.emplace_back(p->ai_addr,
                                   // On Windows, ai_addrlen is a size_t.
                                   static_cast<socklen_t>(p->ai_addrlen));
        }

        freeaddrinfo(gai_result);

        co_return addresses;
    }

    /*************************************************************************
     * operator<< (ostream, address)
     */
    std::ostream &operator<<(std::ostream &strm, address const &addr) {
        char host[NI_MAXHOST];
        char port[NI_MAXSERV];

        auto ret = getnameinfo(
            reinterpret_cast<sockaddr const *>(&addr.native_address),
            addr.native_address_length, host, sizeof(host), port, sizeof(port),
            NI_NUMERICHOST | NI_NUMERICSERV);

        if (ret) {
            strm << "<unable to translate address>";
            return strm;
        }

        if (port != 0 && std::strchr(host, ':') != NULL)
            strm << '[' << host << ']';
        else
            strm << host;

        if (strcmp(port, "0"))
            strm << ":" << port;

        return strm;
    }

} // namespace sk::cio::net