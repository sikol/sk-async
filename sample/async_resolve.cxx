/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <cstdio>
#include <iostream>
#include <ranges>

#include <fmt/core.h>

#include <sk/cio.hxx>
#include <sk/co_main.hxx>

auto resolve(std::string const &name) -> sk::task<void> {
    std::cout << name << ": ";

    sk::net::system_resolver<> res;
    std::vector<sk::net::address<>> addresses;
    auto ret = co_await res.async_resolve(std::inserter(addresses, addresses.end()), name);
    if (!ret) {
        std::cout << ret.error().message() << '\n';
        co_return;
    }

    if (addresses.empty()) {
        std::cout << "no addresses\n";
        co_return;
    }

    std::cout << '\n';

    for (auto &&address : addresses)
        std::cout << '\t' << address << '\n';

    std::cout << '\n';
}

auto co_main(int argc, char **argv) -> sk::task<int> {
    if (argc < 2) {
        fmt::print(stderr, "usage: {} <file> [file...]", argv[0]);
        co_return 1;
    }

    for (auto &&name : std::span(argv + 1, argv + argc))
        co_await resolve(name);

    co_return 0;
}
