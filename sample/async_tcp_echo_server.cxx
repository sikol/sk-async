/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <cstdio>
#include <iostream>
#include <ranges>

#include <fmt/core.h>

#include <sk/cio.hxx>
#include <sk/co_main.hxx>
#include <sk/detail/strparse.hxx>

auto handle_client(sk::net::tcpchannel client) -> sk::task<void>
{
    for (;;) {
        sk::fixed_buffer<std::byte, 1024> buf;

        auto ret = co_await sk::async_read_some(client, buf);
        if (!ret) {
            fmt::print(stderr, "read err: {}\n", ret.error().message());
            co_await client.async_close();
            co_return;
        }

        auto wret = co_await sk::async_write_all(client, buf);
        if (wret.second) {
            co_await client.async_close();
            co_return;
        }
    }
}

auto co_main(int argc, char **argv) -> sk::task<int>
{
    using namespace std::chrono_literals;

    if (argc != 3) {
        fmt::print(stderr, "usage: {} <address> <port>", argv[0]);
        co_return 1;
    }

    auto port = sk::detail::strtoi<std::uint16_t>(argv[2]);
    if (!port) {
        fmt::print(
            stderr, "invalid port '{}': {}\n", argv[2], port.error().message());
        co_return 1;
    }

    auto ep = sk::net::make_tcp_endpoint(argv[1], *port);
    if (!ep) {
        fmt::print(
            stderr, "{}:{}: {}\n", argv[1], argv[2], ep.error().message());
        co_return 1;
    }

    auto server = sk::net::tcpserverchannel::listen(*ep);

    for (;;) {
        auto client = co_await server->async_accept();
        if (!client) {
            fmt::print(
                stderr, "async_accept(): {}\n", client.error().message());
            co_return 1;
        }

        co_await sk::co_detach(handle_client(std::move(*client)));
    }

    co_return 0;
}
