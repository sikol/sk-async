/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <catch.hpp>

#include <cstring>
#include <sk/cio.hxx>

using namespace sk;

static_assert(iseqchannel<iseqcharchannel<char, imemchannel>>);

TEST_CASE("seqcharchannel<char> write_some") {
    char outbuf[4] = {};
    auto mchan = make_memchannel(outbuf);
    auto cchan = make_seqcharchannel<char>(mchan);

    char const inbuf[] = { 'A', 'B', 'C' };
    auto r = write_some(cchan, inbuf);
    REQUIRE(r);
    REQUIRE(*r == 3);
    REQUIRE(std::strcmp(outbuf, "ABC") == 0);
}


TEST_CASE("seqcharchannel<char> async_write_some") {
    char outbuf[4] = {};
    auto mchan = make_memchannel(outbuf);
    auto cchan = make_seqcharchannel<char>(mchan);

    char const inbuf[] = { 'A', 'B', 'C' };
    auto r = wait(async_write_some(cchan, std::span(inbuf)));
    REQUIRE(r);
    REQUIRE(*r == 3);
    REQUIRE(std::strcmp(outbuf, "ABC") == 0);
}


TEST_CASE("seqcharchannel<char> read_some") {
    char inbuf[] = { 'A', 'B', 'C' };
    auto mchan = make_memchannel(inbuf);
    auto cchan = make_seqcharchannel<char>(mchan);

    char outbuf[4] = {};
    auto r = read_some(cchan, outbuf, sizeof(outbuf));
    REQUIRE(r);
    REQUIRE(*r == 3);
    REQUIRE(!std::strcmp(outbuf, "ABC"));
}

TEST_CASE("seqcharchannel<char> async_read_some") {
    char inbuf[] = { 'A', 'B', 'C' };
    auto mchan = make_memchannel(inbuf);
    auto cchan = make_seqcharchannel<char>(mchan);

    char outbuf[4] = {};
    auto r = wait(async_read_some(cchan, outbuf, sizeof(outbuf)));
    REQUIRE(r);
    REQUIRE(*r == 3);
    REQUIRE(!std::strcmp(outbuf, "ABC"));
}
