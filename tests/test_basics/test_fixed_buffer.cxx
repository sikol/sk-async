/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <numeric>
#include <cstring>

#include <catch.hpp>

#include "sk/buffer/fixed_buffer.hxx"

TEST_CASE("small fixed_buffer")
{
    // Our test subject.
    static constexpr std::size_t test_buffer_size = 5;
    sk::fixed_buffer<char, test_buffer_size> buf;

    // Add 5 characters to the buffer, which should fill it up.
    auto n = buffer_write(buf, std::string("testx"));
    REQUIRE(n == test_buffer_size);

    // Now adding more data should fail.
    n = buffer_write(buf, std::string("abc"));
    REQUIRE(n == 0);

    // Read the data we put in the buffer.
    std::array<char, test_buffer_size> ret{};
    n = buffer_read(buf, ret);
    REQUIRE(n == test_buffer_size);
    REQUIRE(ret == std::array{'t', 'e', 's', 't', 'x'});

    // Adding data should still fail.
    n = buffer_write(buf, std::string("abc"));
    REQUIRE(n == 0);

    // Reset the buffer.
    buf.reset();

    // Now do the same thing again, to make sure reset() works.

    // Add 5 characters to the buffer, which should fill it up.
    n = buffer_write(buf, std::string("testx"));
    REQUIRE(n == test_buffer_size);

    // Now adding more data should fail.
    n = buffer_write(buf, std::string("abc"));
    REQUIRE(n == 0);

    // Read the data we put in the buffer.
    n = buffer_read(buf, ret);
    REQUIRE(n == test_buffer_size);
    REQUIRE(ret == std::array{'t', 'e', 's', 't', 'x'});

    // Adding data should still fail.
    n = buffer_write(buf, std::string("abc"));
    REQUIRE(n == 0);

    // Reset the buffer.
    buf.reset();
}

TEST_CASE("fixed_buffer read/write")
{
    static constexpr std::size_t buffer_size = 1024;
    sk::fixed_buffer<char, buffer_size> buffer;

    for (std::size_t nbytes = 2; nbytes <= buffer_size; nbytes += 2) {
        buffer.reset();

        // Write two strings to the buffer.
        auto this_size = nbytes / 2;

        INFO("nbytes = " + std::to_string(nbytes) +
             ", this_size=" + std::to_string(this_size));
        std::string input_a(this_size, 'X');
        std::iota(input_a.begin(), input_a.end(), 'A');
        std::string input_b(this_size, 'x');
        std::iota(input_b.begin(), input_b.end(), 'a');

        auto n = buffer_write(buffer, input_a);
        REQUIRE(n == this_size);
        n = buffer_write(buffer, input_b);
        REQUIRE(n == this_size);

        // Read the data back out.
        std::string output(nbytes, 'X');
        n = buffer_read(buffer, output);
        REQUIRE(n == nbytes);
        REQUIRE(output == (input_a + input_b));
    }
}

TEST_CASE("fixed_buffer readable_ranges/writable_ranges")
{
    static constexpr std::size_t buffer_size = 1024;
    sk::fixed_buffer<char, buffer_size> buffer;

    for (std::size_t nbytes = 2; nbytes <= buffer_size; nbytes += 2) {
        buffer.reset();

        // Write two strings to the buffer.
        auto this_size = nbytes / 2;

        INFO("nbytes = " + std::to_string(nbytes) +
             ", this_size=" + std::to_string(this_size));

        std::string input_a(this_size, 'X');
        std::iota(input_a.begin(), input_a.end(), 'A');
        std::string input_b(this_size, 'x');
        std::iota(input_b.begin(), input_b.end(), 'a');

        // Write the data to the buffer.
        auto all_input = input_a + input_b;
        std::span wdata = all_input;

        for (auto &&range : buffer.writable_ranges()) {
            REQUIRE(!range.empty());

            if (wdata.empty())
                break;

            auto *wdataptr = std::ranges::data(wdata);
            auto wdatasz = std::ranges::size(wdata);
            auto can_write = std::min(std::ranges::size(range), wdatasz);
            std::memcpy(std::ranges::data(range), wdataptr, can_write);

            wdata = wdata.subspan(can_write);
        }
        auto n = buffer.commit(all_input.size());
        REQUIRE(n == all_input.size());

        // Read the data back out.
        std::string output_string;
        INFO("ranges = " + std::to_string(buffer.readable_ranges().size()));
        for (auto &&range : buffer.readable_ranges()) {
            REQUIRE(!range.empty());
            output_string.insert(output_string.end(),
                                 std::ranges::begin(range),
                                 std::ranges::end(range));
        }
        n = buffer.discard(output_string.size());
        REQUIRE(n == output_string.size());

        REQUIRE(output_string.size() == nbytes);
        REQUIRE(output_string == (input_a + input_b));
    }
}
