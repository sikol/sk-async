/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <catch.hpp>

#include <array>
#include <cstring>

#include "sk/channel/memchannel.hxx"
#include "sk/channel/read.hxx"
#include "sk/channel/write.hxx"

TEST_CASE("memchannel::write_some()")
{
    std::array buf{std::byte{'A'}, std::byte{'B'}, std::byte{'C'}};
    std::array<char, 4> out{};
    std::ranges::fill(out, 'X');

    auto chnl = sk::make_memchannel(out);

    auto nbytes = sk::write_some(chnl, buf, 3);
    REQUIRE(nbytes);
    REQUIRE(*nbytes == 3);
    REQUIRE(out[0] == 'A');
    REQUIRE(out[1] == 'B');
    REQUIRE(out[2] == 'C');
    REQUIRE(out[3] == 'X');
}

TEST_CASE("memchannel::write_some() single byte")
{
    std::array const buf{
        std::byte{'A'}, std::byte{'B'}, std::byte{'C'}, std::byte{'X'}};
    std::array<char, 4> out{};
    std::ranges::fill(out, 'X');

    auto chnl = sk::make_memchannel(std::span(out).subspan(0, 3));

    auto nbytes = sk::write_some(chnl, std::span(buf).subspan(0, 1));
    REQUIRE(nbytes);
    REQUIRE(*nbytes == 1);

    nbytes = sk::write_some(chnl, std::span(buf).subspan(1, 1));
    REQUIRE(nbytes);
    REQUIRE(*nbytes == 1);

    nbytes = sk::write_some(chnl, std::span(buf).subspan(2, 1));
    REQUIRE(nbytes);
    REQUIRE(*nbytes == 1);

    nbytes = sk::write_some(chnl, std::span(buf).subspan(2, 1));
    REQUIRE(!nbytes);
    REQUIRE(nbytes.error() == sk::error::end_of_file);

    REQUIRE(out[0] == 'A');
    REQUIRE(out[1] == 'B');
    REQUIRE(out[2] == 'C');
    REQUIRE(out[3] == 'X');
}

TEST_CASE("memchannel::write_some_at() single byte")
{
    std::array const buf{std::byte{'A'}, std::byte{'B'}, std::byte{'C'}};
    std::array<char, 4> out{};
    std::ranges::fill(out, 'X');

    auto chnl = sk::make_memchannel(std::span(out).subspan(0, 3));

    auto nbytes = sk::write_some(chnl, std::span(buf).subspan(0, 1));
    REQUIRE(nbytes);
    REQUIRE(*nbytes == 1);

    nbytes = sk::write_some(chnl, std::span(buf).subspan(1, 1));
    REQUIRE(nbytes);
    REQUIRE(*nbytes == 1);

    nbytes = sk::write_some(chnl, std::span(buf).subspan(2, 1));
    REQUIRE(nbytes);
    REQUIRE(*nbytes == 1);

    nbytes = sk::write_some(chnl, std::span(buf).subspan(2, 1));
    REQUIRE(!nbytes);
    REQUIRE(nbytes.error() == sk::error::end_of_file);

    REQUIRE(out[0] == 'A');
    REQUIRE(out[1] == 'B');
    REQUIRE(out[2] == 'C');
    REQUIRE(out[3] == 'X');
}

TEST_CASE("memchannel::write_some() past the end")
{
    std::array const buf{
        std::byte{'A'}, std::byte{'B'}, std::byte{'C'}, std::byte{'D'}};
    std::array<char, 4> out{};
    std::ranges::fill(out, 'X');

    auto chnl = sk::make_memchannel(std::span(out).subspan(0, 3));

    auto nbytes = sk::write_some(chnl, buf);
    REQUIRE(nbytes);
    REQUIRE(*nbytes == 3);
    REQUIRE(out[0] == 'A');
    REQUIRE(out[1] == 'B');
    REQUIRE(out[2] == 'C');
    REQUIRE(out[3] == 'X');
}

TEST_CASE("memchannel::write_some() with an invalid location")
{
    std::array const buf{std::byte{'A'}, std::byte{'B'}, std::byte{'C'}};
    std::array<char, 4> out{};
    std::ranges::fill(out, 'X');

    auto chnl = sk::make_memchannel(out);

    auto nbytes = sk::write_some_at(chnl, 4, buf);
    REQUIRE(!nbytes);
    REQUIRE(nbytes.error() == sk::error::end_of_file);
}

TEST_CASE("memchannel::read_some() partial buffer")
{
    std::array<char, 20> buf{'A', 'B', 'C'}; // NOLINT
    std::array<std::byte, 4> dat{};
    std::ranges::fill(dat, std::byte{'X'});

    auto chnl = sk::make_memchannel(buf);

    auto nbytes = sk::read_some(chnl, dat, 3);
    REQUIRE(nbytes);
    REQUIRE(*nbytes == 3);
    REQUIRE(dat[0] == std::byte{'A'});
    REQUIRE(dat[1] == std::byte{'B'});
    REQUIRE(dat[2] == std::byte{'C'});
    REQUIRE(dat[3] == std::byte{'X'});
}

TEST_CASE("memchannel::read_some() single-byte")
{
    std::array buf{'A', 'B', 'C'};
    std::array<std::byte, 4> dat{};
    std::ranges::fill(dat, std::byte{'X'});

    auto chnl = sk::make_memchannel(buf);

    auto nbytes = sk::read_some(chnl, dat, 1);
    REQUIRE(nbytes);
    REQUIRE(*nbytes == 1);

    nbytes = sk::read_some(chnl, std::span(dat).subspan(1), 1);
    REQUIRE(nbytes);
    REQUIRE(*nbytes == 1);

    nbytes = sk::read_some(chnl, std::span(dat).subspan(2), 1);
    REQUIRE(nbytes);
    REQUIRE(*nbytes == 1);

    nbytes = sk::read_some(chnl, dat, 1);
    REQUIRE(!nbytes);
    REQUIRE(nbytes.error() == sk::error::end_of_file);

    REQUIRE(dat[0] == std::byte{'A'});
    REQUIRE(dat[1] == std::byte{'B'});
    REQUIRE(dat[2] == std::byte{'C'});
    REQUIRE(dat[3] == std::byte{'X'});
}

TEST_CASE("memchannel::read_some_at() single-byte")
{
    std::array buf{'A', 'B', 'C'};
    std::array<std::byte, 4> dat{};
    std::ranges::fill(dat, std::byte{'X'});

    auto chnl = sk::make_memchannel(buf);

    auto nbytes = sk::read_some_at(chnl, 0, std::span(dat).subspan(0, 1));
    REQUIRE(nbytes);
    REQUIRE(*nbytes == 1);

    nbytes = sk::read_some_at(chnl, 1, std::span(dat).subspan(1), 1);
    REQUIRE(nbytes);
    REQUIRE(*nbytes == 1);

    nbytes = sk::read_some_at(chnl, 2, std::span(dat).subspan(2), 1);
    REQUIRE(nbytes);
    REQUIRE(*nbytes == 1);

    nbytes = sk::read_some_at(chnl, 3, dat, 1);
    REQUIRE(!nbytes);
    REQUIRE(nbytes.error() == sk::error::end_of_file);

    REQUIRE(dat[0] == std::byte{'A'});
    REQUIRE(dat[1] == std::byte{'B'});
    REQUIRE(dat[2] == std::byte{'C'});
    REQUIRE(dat[3] == std::byte{'X'});
}

TEST_CASE("memchannel::read_some() past the end")
{
    std::array buf{'A', 'B', 'C'};
    std::array<std::byte, 4> dat{};
    std::ranges::fill(dat, std::byte{'X'});

    auto chnl = sk::make_memchannel(buf);

    auto nbytes = sk::read_some(chnl, dat, 4);
    REQUIRE(nbytes);
    REQUIRE(*nbytes == 3);
    REQUIRE(dat[0] == std::byte{'A'});
    REQUIRE(dat[1] == std::byte{'B'});
    REQUIRE(dat[2] == std::byte{'C'});
    REQUIRE(dat[3] == std::byte{'X'});
}

TEST_CASE("memchannel::read_some_at() with an invalid location")
{
    std::array buf{'A', 'B', 'C'};
    std::array<std::byte, 4> dat{};
    std::ranges::fill(dat, std::byte{'X'});

    auto chnl = sk::make_memchannel(buf);

    auto nbytes = sk::read_some_at(chnl, 4, dat, 1);
    REQUIRE(!nbytes);
    REQUIRE(nbytes.error() == sk::error::end_of_file);
}
